name: CI Pipeline

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"
  DOCKER_REGISTRY: "ghcr.io"
  IMAGE_NAME: "legal-sim"

jobs:
  # Code Quality and Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache Node dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r tests/requirements-test.txt

    - name: Install Node dependencies
      run: |
        cd web/case-dashboard
        npm ci

    - name: Run Python linting
      run: |
        # Run ruff for fast linting
        ruff check services/ tests/ --output-format=github
        
        # Run black for formatting
        black --check services/ tests/
        
        # Run isort for import sorting
        isort --check-only services/ tests/

    - name: Run TypeScript linting
      run: |
        cd web/case-dashboard
        npm run lint

    - name: Run mypy type checking
      run: |
        mypy services/ --ignore-missing-imports

    - name: Security scan with bandit
      run: |
        bandit -r services/ -f json -o bandit-report.json || true
        bandit -r services/ -f txt

    - name: Dependency vulnerability scan
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: legal_sim_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr ffmpeg

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r tests/requirements-test.txt

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=services --cov-report=xml --cov-report=html

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --timeout=300

    - name: Run compliance tests
      run: |
        pytest tests/compliance/ -v

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          coverage.xml
          htmlcov/
          .pytest_cache/

  # Determinism Tests
  determinism-check:
    name: Determinism Verification
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Blender
      run: |
        wget https://mirror.clarkson.edu/blender/release/Blender4.0/blender-4.0.0-linux-x64.tar.xz
        tar -xf blender-4.0.0-linux-x64.tar.xz
        sudo mv blender-4.0.0-linux-x64 /opt/blender
        sudo ln -s /opt/blender/blender /usr/local/bin/blender

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r tests/requirements-test.txt

    - name: Run determinism tests
      run: |
        pytest tests/determinism/ -v --timeout=600

    - name: Upload determinism reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: determinism-reports
        path: |
          determinism_report.json
          golden_test_cases/

  # Performance Tests
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r tests/requirements-test.txt

    - name: Run performance tests
      run: |
        pytest tests/performance/ -v --benchmark-only --benchmark-save=performance

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: .benchmarks/

  # Build and Test Docker Images
  build-images:
    name: Build & Test Images
    runs-on: ubuntu-latest
    needs: [test, determinism-check]
    
    strategy:
      matrix:
        service: [api-gateway, evidence-processor, storyboard-service, timeline-compiler, render-orchestrator]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: infrastructure/docker/services/${{ matrix.service }}.Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # E2E Tests
  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: build-images
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r tests/requirements-test.txt

    - name: Start services with Docker Compose
      run: |
        docker-compose up -d --build
        sleep 30  # Wait for services to start

    - name: Run E2E tests
      run: |
        pytest tests/e2e/ -v --timeout=1800

    - name: Stop services
      if: always()
      run: |
        docker-compose down -v

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          e2e-test-report.html
          test-screenshots/

  # License Compliance
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses

    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=html --output-file=licenses.html

    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          licenses.json
          licenses.html

  # Generate Test Report
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [test, determinism-check, performance-test, e2e-test, license-check]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate comprehensive report
      run: |
        python scripts/generate_test_report.py

    - name: Upload final report
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-test-report
        path: |
          test-report.html
          test-report.json
