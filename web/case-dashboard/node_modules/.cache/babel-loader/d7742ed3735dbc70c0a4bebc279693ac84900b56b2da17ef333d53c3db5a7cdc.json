{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nexport const evidenceApi = createApi({\n  reducerPath: 'evidenceApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${API_BASE_URL}/api/v1/evidence`,\n    prepareHeaders: headers => {\n      const token = localStorage.getItem('legal-sim-token');\n      if (token) {\n        headers.set('authorization', `Bearer ${token}`);\n      }\n      return headers;\n    }\n  }),\n  tagTypes: ['Evidence'],\n  endpoints: builder => ({\n    getEvidence: builder.query({\n      query: ({\n        caseId\n      }) => caseId ? `?case_id_filter=${caseId}` : '',\n      providesTags: ['Evidence'],\n      transformResponse: response => {\n        return response.map(evidence => {\n          var _evidence$metadata, _evidence$metadata2, _evidence$metadata3, _evidence$metadata4, _evidence$metadata5, _evidence$metadata6;\n          return {\n            id: evidence.id,\n            name: ((_evidence$metadata = evidence.metadata) === null || _evidence$metadata === void 0 ? void 0 : _evidence$metadata.filename) || evidence.filename,\n            type: evidence.evidence_type || 'document',\n            size: ((_evidence$metadata2 = evidence.metadata) === null || _evidence$metadata2 === void 0 ? void 0 : _evidence$metadata2.size_bytes) || evidence.file_size,\n            sha256: ((_evidence$metadata3 = evidence.metadata) === null || _evidence$metadata3 === void 0 ? void 0 : _evidence$metadata3.checksum) || evidence.file_hash,\n            uploadedAt: ((_evidence$metadata4 = evidence.metadata) === null || _evidence$metadata4 === void 0 ? void 0 : _evidence$metadata4.uploaded_at) || evidence.uploaded_at,\n            uploadedBy: ((_evidence$metadata5 = evidence.metadata) === null || _evidence$metadata5 === void 0 ? void 0 : _evidence$metadata5.uploaded_by) || evidence.uploaded_by,\n            caseId: evidence.case_id,\n            description: ((_evidence$metadata6 = evidence.metadata) === null || _evidence$metadata6 === void 0 ? void 0 : _evidence$metadata6.description) || '',\n            chainOfCustody: evidence.chain_of_custody || [],\n            status: evidence.status === 'processed' ? 'completed' : evidence.status === 'failed' ? 'error' : 'processing',\n            metadata: evidence.processing_result || {}\n          };\n        });\n      }\n    }),\n    getEvidenceById: builder.query({\n      query: id => `/${id}`,\n      providesTags: (result, error, id) => [{\n        type: 'Evidence',\n        id\n      }]\n    }),\n    uploadEvidence: builder.mutation({\n      query: ({\n        file,\n        caseId,\n        description,\n        chainOfCustody\n      }) => {\n        const formData = new FormData();\n        formData.append('file', file);\n        if (caseId) formData.append('caseId', caseId);\n        if (description) formData.append('description', description);\n        if (chainOfCustody) formData.append('chainOfCustody', JSON.stringify(chainOfCustody));\n        return {\n          url: '/upload',\n          method: 'POST',\n          body: formData\n        };\n      },\n      invalidatesTags: ['Evidence']\n    }),\n    updateEvidence: builder.mutation({\n      query: ({\n        id,\n        updates\n      }) => ({\n        url: `/${id}`,\n        method: 'PATCH',\n        body: updates\n      }),\n      invalidatesTags: (result, error, {\n        id\n      }) => [{\n        type: 'Evidence',\n        id\n      }]\n    }),\n    deleteEvidence: builder.mutation({\n      query: id => ({\n        url: `/${id}`,\n        method: 'DELETE'\n      }),\n      invalidatesTags: ['Evidence']\n    }),\n    verifyChecksum: builder.mutation({\n      query: ({\n        id,\n        checksum\n      }) => ({\n        url: `/${id}/verify`,\n        method: 'POST',\n        body: {\n          checksum\n        }\n      })\n    }),\n    downloadEvidence: builder.query({\n      query: id => ({\n        url: `/${id}/download`,\n        responseHandler: 'content-type'\n      }),\n      providesTags: (result, error, id) => [{\n        type: 'Evidence',\n        id\n      }]\n    }),\n    getChainOfCustody: builder.query({\n      query: id => `/${id}/chain-of-custody`,\n      providesTags: (result, error, id) => [{\n        type: 'Evidence',\n        id\n      }]\n    })\n  })\n});\nexport const {\n  useGetEvidenceQuery,\n  useGetEvidenceByIdQuery,\n  useUploadEvidenceMutation,\n  useUpdateEvidenceMutation,\n  useDeleteEvidenceMutation,\n  useVerifyChecksumMutation,\n  useDownloadEvidenceQuery,\n  useGetChainOfCustodyQuery\n} = evidenceApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","API_BASE_URL","process","env","REACT_APP_API_URL","evidenceApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","token","localStorage","getItem","set","tagTypes","endpoints","builder","getEvidence","query","caseId","providesTags","transformResponse","response","map","evidence","_evidence$metadata","_evidence$metadata2","_evidence$metadata3","_evidence$metadata4","_evidence$metadata5","_evidence$metadata6","id","name","metadata","filename","type","evidence_type","size","size_bytes","file_size","sha256","checksum","file_hash","uploadedAt","uploaded_at","uploadedBy","uploaded_by","case_id","description","chainOfCustody","chain_of_custody","status","processing_result","getEvidenceById","result","error","uploadEvidence","mutation","file","formData","FormData","append","JSON","stringify","url","method","body","invalidatesTags","updateEvidence","updates","deleteEvidence","verifyChecksum","downloadEvidence","responseHandler","getChainOfCustody","useGetEvidenceQuery","useGetEvidenceByIdQuery","useUploadEvidenceMutation","useUpdateEvidenceMutation","useDeleteEvidenceMutation","useVerifyChecksumMutation","useDownloadEvidenceQuery","useGetChainOfCustodyQuery"],"sources":["/Users/jaylenjohnson18/Storyboard/web/case-dashboard/src/store/api/evidenceApi.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport interface Evidence {\n  id: string;\n  name: string;\n  type: string;\n  size: number;\n  sha256: string;\n  uploadedAt: string;\n  uploadedBy: string;\n  caseId?: string;\n  description?: string;\n  chainOfCustody: string[];\n  status: 'processing' | 'completed' | 'error';\n  metadata?: {\n    duration?: number;\n    pageCount?: number;\n    resolution?: string;\n    format?: string;\n  };\n}\n\nexport interface UploadEvidenceRequest {\n  file: File;\n  caseId?: string;\n  description?: string;\n  chainOfCustody?: string[];\n}\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nexport const evidenceApi = createApi({\n  reducerPath: 'evidenceApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${API_BASE_URL}/api/v1/evidence`,\n    prepareHeaders: (headers) => {\n      const token = localStorage.getItem('legal-sim-token');\n      if (token) {\n        headers.set('authorization', `Bearer ${token}`);\n      }\n      return headers;\n    },\n  }),\n  tagTypes: ['Evidence'],\n  endpoints: (builder) => ({\n    getEvidence: builder.query<Evidence[], { caseId?: string }>({\n      query: ({ caseId }) => (caseId ? `?case_id_filter=${caseId}` : ''),\n      providesTags: ['Evidence'],\n      transformResponse: (response: any[]) => {\n        return response.map(evidence => ({\n          id: evidence.id,\n          name: evidence.metadata?.filename || evidence.filename,\n          type: evidence.evidence_type || 'document',\n          size: evidence.metadata?.size_bytes || evidence.file_size,\n          sha256: evidence.metadata?.checksum || evidence.file_hash,\n          uploadedAt: evidence.metadata?.uploaded_at || evidence.uploaded_at,\n          uploadedBy: evidence.metadata?.uploaded_by || evidence.uploaded_by,\n          caseId: evidence.case_id,\n          description: evidence.metadata?.description || '',\n          chainOfCustody: evidence.chain_of_custody || [],\n          status: evidence.status === 'processed' ? 'completed' : \n                  evidence.status === 'failed' ? 'error' : 'processing',\n          metadata: evidence.processing_result || {},\n        }));\n      },\n    }),\n    getEvidenceById: builder.query<Evidence, string>({\n      query: (id) => `/${id}`,\n      providesTags: (result, error, id) => [{ type: 'Evidence', id }],\n    }),\n    uploadEvidence: builder.mutation<Evidence, UploadEvidenceRequest>({\n      query: ({ file, caseId, description, chainOfCustody }) => {\n        const formData = new FormData();\n        formData.append('file', file);\n        if (caseId) formData.append('caseId', caseId);\n        if (description) formData.append('description', description);\n        if (chainOfCustody) formData.append('chainOfCustody', JSON.stringify(chainOfCustody));\n        \n        return {\n          url: '/upload',\n          method: 'POST',\n          body: formData,\n        };\n      },\n      invalidatesTags: ['Evidence'],\n    }),\n    updateEvidence: builder.mutation<Evidence, { id: string; updates: Partial<Evidence> }>({\n      query: ({ id, updates }) => ({\n        url: `/${id}`,\n        method: 'PATCH',\n        body: updates,\n      }),\n      invalidatesTags: (result, error, { id }) => [{ type: 'Evidence', id }],\n    }),\n    deleteEvidence: builder.mutation<void, string>({\n      query: (id) => ({\n        url: `/${id}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['Evidence'],\n    }),\n    verifyChecksum: builder.mutation<{ valid: boolean }, { id: string; checksum: string }>({\n      query: ({ id, checksum }) => ({\n        url: `/${id}/verify`,\n        method: 'POST',\n        body: { checksum },\n      }),\n    }),\n    downloadEvidence: builder.query<Blob, string>({\n      query: (id) => ({\n        url: `/${id}/download`,\n        responseHandler: 'content-type',\n      }),\n      providesTags: (result, error, id) => [{ type: 'Evidence', id }],\n    }),\n    getChainOfCustody: builder.query<Array<{action: string; actor: string; timestamp: string; metadata?: any}>, string>({\n      query: (id) => `/${id}/chain-of-custody`,\n      providesTags: (result, error, id) => [{ type: 'Evidence', id }],\n    }),\n  }),\n});\n\nexport const {\n  useGetEvidenceQuery,\n  useGetEvidenceByIdQuery,\n  useUploadEvidenceMutation,\n  useUpdateEvidenceMutation,\n  useDeleteEvidenceMutation,\n  useVerifyChecksumMutation,\n  useDownloadEvidenceQuery,\n  useGetChainOfCustodyQuery,\n} = evidenceApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}