{"ast":null,"code":"// Simple session management utilities\n// TODO: Replace with proper JWT token management when backend is ready\n\nconst SESSION_KEY = 'legal-sim-session';\nexport const getSession = () => {\n  try {\n    const sessionData = localStorage.getItem(SESSION_KEY);\n    if (!sessionData) return null;\n    const session = JSON.parse(sessionData);\n\n    // Check if session is expired\n    if (new Date() > new Date(session.expiresAt)) {\n      localStorage.removeItem(SESSION_KEY);\n      return null;\n    }\n    return session;\n  } catch (error) {\n    console.error('Error parsing session:', error);\n    localStorage.removeItem(SESSION_KEY);\n    return null;\n  }\n};\nexport const setSession = session => {\n  localStorage.setItem(SESSION_KEY, JSON.stringify(session));\n};\nexport const clearSession = () => {\n  localStorage.removeItem(SESSION_KEY);\n};\nexport const isAuthenticated = () => {\n  return getSession() !== null;\n};\nexport const getCurrentUser = () => {\n  const session = getSession();\n  return (session === null || session === void 0 ? void 0 : session.user) || null;\n};\n\n// Mock login function for development\nexport const mockLogin = async (email, password) => {\n  // Simulate API call delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Mock user data\n  const mockUser = {\n    id: 'user-001',\n    email,\n    name: email.split('@')[0],\n    role: 'attorney'\n  };\n  const session = {\n    user: mockUser,\n    token: 'mock-jwt-token',\n    expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 hours\n  };\n  setSession(session);\n  return session;\n};\nexport const mockLogout = async () => {\n  // Simulate API call delay\n  await new Promise(resolve => setTimeout(resolve, 500));\n  clearSession();\n};","map":{"version":3,"names":["SESSION_KEY","getSession","sessionData","localStorage","getItem","session","JSON","parse","Date","expiresAt","removeItem","error","console","setSession","setItem","stringify","clearSession","isAuthenticated","getCurrentUser","user","mockLogin","email","password","Promise","resolve","setTimeout","mockUser","id","name","split","role","token","now","mockLogout"],"sources":["/Users/jaylenjohnson18/Storyboard/web/case-dashboard/src/utils/auth.ts"],"sourcesContent":["// Simple session management utilities\n// TODO: Replace with proper JWT token management when backend is ready\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  role: 'admin' | 'attorney' | 'viewer';\n}\n\nexport interface Session {\n  user: User;\n  token: string;\n  expiresAt: Date;\n}\n\nconst SESSION_KEY = 'legal-sim-session';\n\nexport const getSession = (): Session | null => {\n  try {\n    const sessionData = localStorage.getItem(SESSION_KEY);\n    if (!sessionData) return null;\n    \n    const session: Session = JSON.parse(sessionData);\n    \n    // Check if session is expired\n    if (new Date() > new Date(session.expiresAt)) {\n      localStorage.removeItem(SESSION_KEY);\n      return null;\n    }\n    \n    return session;\n  } catch (error) {\n    console.error('Error parsing session:', error);\n    localStorage.removeItem(SESSION_KEY);\n    return null;\n  }\n};\n\nexport const setSession = (session: Session): void => {\n  localStorage.setItem(SESSION_KEY, JSON.stringify(session));\n};\n\nexport const clearSession = (): void => {\n  localStorage.removeItem(SESSION_KEY);\n};\n\nexport const isAuthenticated = (): boolean => {\n  return getSession() !== null;\n};\n\nexport const getCurrentUser = (): User | null => {\n  const session = getSession();\n  return session?.user || null;\n};\n\n// Mock login function for development\nexport const mockLogin = async (email: string, password: string): Promise<Session> => {\n  // Simulate API call delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  \n  // Mock user data\n  const mockUser: User = {\n    id: 'user-001',\n    email,\n    name: email.split('@')[0],\n    role: 'attorney'\n  };\n  \n  const session: Session = {\n    user: mockUser,\n    token: 'mock-jwt-token',\n    expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 hours\n  };\n  \n  setSession(session);\n  return session;\n};\n\nexport const mockLogout = async (): Promise<void> => {\n  // Simulate API call delay\n  await new Promise(resolve => setTimeout(resolve, 500));\n  clearSession();\n};\n"],"mappings":"AAAA;AACA;;AAeA,MAAMA,WAAW,GAAG,mBAAmB;AAEvC,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAsB;EAC9C,IAAI;IACF,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAACJ,WAAW,CAAC;IACrD,IAAI,CAACE,WAAW,EAAE,OAAO,IAAI;IAE7B,MAAMG,OAAgB,GAAGC,IAAI,CAACC,KAAK,CAACL,WAAW,CAAC;;IAEhD;IACA,IAAI,IAAIM,IAAI,CAAC,CAAC,GAAG,IAAIA,IAAI,CAACH,OAAO,CAACI,SAAS,CAAC,EAAE;MAC5CN,YAAY,CAACO,UAAU,CAACV,WAAW,CAAC;MACpC,OAAO,IAAI;IACb;IAEA,OAAOK,OAAO;EAChB,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9CR,YAAY,CAACO,UAAU,CAACV,WAAW,CAAC;IACpC,OAAO,IAAI;EACb;AACF,CAAC;AAED,OAAO,MAAMa,UAAU,GAAIR,OAAgB,IAAW;EACpDF,YAAY,CAACW,OAAO,CAACd,WAAW,EAAEM,IAAI,CAACS,SAAS,CAACV,OAAO,CAAC,CAAC;AAC5D,CAAC;AAED,OAAO,MAAMW,YAAY,GAAGA,CAAA,KAAY;EACtCb,YAAY,CAACO,UAAU,CAACV,WAAW,CAAC;AACtC,CAAC;AAED,OAAO,MAAMiB,eAAe,GAAGA,CAAA,KAAe;EAC5C,OAAOhB,UAAU,CAAC,CAAC,KAAK,IAAI;AAC9B,CAAC;AAED,OAAO,MAAMiB,cAAc,GAAGA,CAAA,KAAmB;EAC/C,MAAMb,OAAO,GAAGJ,UAAU,CAAC,CAAC;EAC5B,OAAO,CAAAI,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEc,IAAI,KAAI,IAAI;AAC9B,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAuB;EACpF;EACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEvD;EACA,MAAME,QAAc,GAAG;IACrBC,EAAE,EAAE,UAAU;IACdN,KAAK;IACLO,IAAI,EAAEP,KAAK,CAACQ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACzBC,IAAI,EAAE;EACR,CAAC;EAED,MAAMzB,OAAgB,GAAG;IACvBc,IAAI,EAAEO,QAAQ;IACdK,KAAK,EAAE,gBAAgB;IACvBtB,SAAS,EAAE,IAAID,IAAI,CAACA,IAAI,CAACwB,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;EACxD,CAAC;EAEDnB,UAAU,CAACR,OAAO,CAAC;EACnB,OAAOA,OAAO;AAChB,CAAC;AAED,OAAO,MAAM4B,UAAU,GAAG,MAAAA,CAAA,KAA2B;EACnD;EACA,MAAM,IAAIV,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;EACtDR,YAAY,CAAC,CAAC;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}