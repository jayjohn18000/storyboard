{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nexport const evidenceApi = createApi({\n  reducerPath: 'evidenceApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${API_BASE_URL}/api/v1/evidence`,\n    prepareHeaders: headers => {\n      const token = localStorage.getItem('legal-sim-token');\n      if (token) {\n        headers.set('authorization', `Bearer ${token}`);\n      }\n      return headers;\n    }\n  }),\n  tagTypes: ['Evidence'],\n  endpoints: builder => ({\n    getEvidence: builder.query({\n      query: ({\n        caseId\n      }) => caseId ? `?caseId=${caseId}` : '',\n      providesTags: ['Evidence'],\n      // Mock data for development\n      transformResponse: () => [{\n        id: 'ev-001',\n        name: 'Contract_Amendment.pdf',\n        type: 'document',\n        size: 1024000,\n        sha256: 'a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456',\n        uploadedAt: '2024-01-20T10:30:00Z',\n        uploadedBy: 'John Attorney',\n        caseId: 'case-001',\n        description: 'Contract amendment document',\n        chainOfCustody: ['John Attorney', 'Legal Team'],\n        status: 'completed',\n        metadata: {\n          pageCount: 5,\n          format: 'PDF'\n        }\n      }, {\n        id: 'ev-002',\n        name: 'Meeting_Recording.mp3',\n        type: 'audio',\n        size: 5120000,\n        sha256: 'b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef1234567',\n        uploadedAt: '2024-01-19T14:15:00Z',\n        uploadedBy: 'Jane Lawyer',\n        caseId: 'case-001',\n        description: 'Meeting recording',\n        chainOfCustody: ['Jane Lawyer'],\n        status: 'completed',\n        metadata: {\n          duration: 1800,\n          format: 'MP3'\n        }\n      }]\n    }),\n    getEvidenceById: builder.query({\n      query: id => `/${id}`,\n      providesTags: (result, error, id) => [{\n        type: 'Evidence',\n        id\n      }]\n    }),\n    uploadEvidence: builder.mutation({\n      query: ({\n        file,\n        caseId,\n        description,\n        chainOfCustody\n      }) => {\n        const formData = new FormData();\n        formData.append('file', file);\n        if (caseId) formData.append('caseId', caseId);\n        if (description) formData.append('description', description);\n        if (chainOfCustody) formData.append('chainOfCustody', JSON.stringify(chainOfCustody));\n        return {\n          url: '/upload',\n          method: 'POST',\n          body: formData\n        };\n      },\n      invalidatesTags: ['Evidence']\n    }),\n    updateEvidence: builder.mutation({\n      query: ({\n        id,\n        updates\n      }) => ({\n        url: `/${id}`,\n        method: 'PATCH',\n        body: updates\n      }),\n      invalidatesTags: (result, error, {\n        id\n      }) => [{\n        type: 'Evidence',\n        id\n      }]\n    }),\n    deleteEvidence: builder.mutation({\n      query: id => ({\n        url: `/${id}`,\n        method: 'DELETE'\n      }),\n      invalidatesTags: ['Evidence']\n    }),\n    verifyChecksum: builder.mutation({\n      query: ({\n        id,\n        checksum\n      }) => ({\n        url: `/${id}/verify`,\n        method: 'POST',\n        body: {\n          checksum\n        }\n      })\n    })\n  })\n});\nexport const {\n  useGetEvidenceQuery,\n  useGetEvidenceByIdQuery,\n  useUploadEvidenceMutation,\n  useUpdateEvidenceMutation,\n  useDeleteEvidenceMutation,\n  useVerifyChecksumMutation\n} = evidenceApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","API_BASE_URL","process","env","REACT_APP_API_URL","evidenceApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","token","localStorage","getItem","set","tagTypes","endpoints","builder","getEvidence","query","caseId","providesTags","transformResponse","id","name","type","size","sha256","uploadedAt","uploadedBy","description","chainOfCustody","status","metadata","pageCount","format","duration","getEvidenceById","result","error","uploadEvidence","mutation","file","formData","FormData","append","JSON","stringify","url","method","body","invalidatesTags","updateEvidence","updates","deleteEvidence","verifyChecksum","checksum","useGetEvidenceQuery","useGetEvidenceByIdQuery","useUploadEvidenceMutation","useUpdateEvidenceMutation","useDeleteEvidenceMutation","useVerifyChecksumMutation"],"sources":["/Users/jaylenjohnson18/Storyboard/web/case-dashboard/src/store/api/evidenceApi.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport interface Evidence {\n  id: string;\n  name: string;\n  type: string;\n  size: number;\n  sha256: string;\n  uploadedAt: string;\n  uploadedBy: string;\n  caseId?: string;\n  description?: string;\n  chainOfCustody: string[];\n  status: 'processing' | 'completed' | 'error';\n  metadata?: {\n    duration?: number;\n    pageCount?: number;\n    resolution?: string;\n    format?: string;\n  };\n}\n\nexport interface UploadEvidenceRequest {\n  file: File;\n  caseId?: string;\n  description?: string;\n  chainOfCustody?: string[];\n}\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nexport const evidenceApi = createApi({\n  reducerPath: 'evidenceApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${API_BASE_URL}/api/v1/evidence`,\n    prepareHeaders: (headers) => {\n      const token = localStorage.getItem('legal-sim-token');\n      if (token) {\n        headers.set('authorization', `Bearer ${token}`);\n      }\n      return headers;\n    },\n  }),\n  tagTypes: ['Evidence'],\n  endpoints: (builder) => ({\n    getEvidence: builder.query<Evidence[], { caseId?: string }>({\n      query: ({ caseId }) => (caseId ? `?caseId=${caseId}` : ''),\n      providesTags: ['Evidence'],\n      // Mock data for development\n      transformResponse: () => [\n        {\n          id: 'ev-001',\n          name: 'Contract_Amendment.pdf',\n          type: 'document',\n          size: 1024000,\n          sha256: 'a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456',\n          uploadedAt: '2024-01-20T10:30:00Z',\n          uploadedBy: 'John Attorney',\n          caseId: 'case-001',\n          description: 'Contract amendment document',\n          chainOfCustody: ['John Attorney', 'Legal Team'],\n          status: 'completed',\n          metadata: {\n            pageCount: 5,\n            format: 'PDF',\n          },\n        },\n        {\n          id: 'ev-002',\n          name: 'Meeting_Recording.mp3',\n          type: 'audio',\n          size: 5120000,\n          sha256: 'b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef1234567',\n          uploadedAt: '2024-01-19T14:15:00Z',\n          uploadedBy: 'Jane Lawyer',\n          caseId: 'case-001',\n          description: 'Meeting recording',\n          chainOfCustody: ['Jane Lawyer'],\n          status: 'completed',\n          metadata: {\n            duration: 1800,\n            format: 'MP3',\n          },\n        },\n      ],\n    }),\n    getEvidenceById: builder.query<Evidence, string>({\n      query: (id) => `/${id}`,\n      providesTags: (result, error, id) => [{ type: 'Evidence', id }],\n    }),\n    uploadEvidence: builder.mutation<Evidence, UploadEvidenceRequest>({\n      query: ({ file, caseId, description, chainOfCustody }) => {\n        const formData = new FormData();\n        formData.append('file', file);\n        if (caseId) formData.append('caseId', caseId);\n        if (description) formData.append('description', description);\n        if (chainOfCustody) formData.append('chainOfCustody', JSON.stringify(chainOfCustody));\n        \n        return {\n          url: '/upload',\n          method: 'POST',\n          body: formData,\n        };\n      },\n      invalidatesTags: ['Evidence'],\n    }),\n    updateEvidence: builder.mutation<Evidence, { id: string; updates: Partial<Evidence> }>({\n      query: ({ id, updates }) => ({\n        url: `/${id}`,\n        method: 'PATCH',\n        body: updates,\n      }),\n      invalidatesTags: (result, error, { id }) => [{ type: 'Evidence', id }],\n    }),\n    deleteEvidence: builder.mutation<void, string>({\n      query: (id) => ({\n        url: `/${id}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['Evidence'],\n    }),\n    verifyChecksum: builder.mutation<{ valid: boolean }, { id: string; checksum: string }>({\n      query: ({ id, checksum }) => ({\n        url: `/${id}/verify`,\n        method: 'POST',\n        body: { checksum },\n      }),\n    }),\n  }),\n});\n\nexport const {\n  useGetEvidenceQuery,\n  useGetEvidenceByIdQuery,\n  useUploadEvidenceMutation,\n  useUpdateEvidenceMutation,\n  useDeleteEvidenceMutation,\n  useVerifyChecksumMutation,\n} = evidenceApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}