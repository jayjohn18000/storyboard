{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nexport const rendersApi = createApi({\n  reducerPath: 'rendersApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${API_BASE_URL}/api/v1/renders`,\n    prepareHeaders: headers => {\n      const token = localStorage.getItem('legal-sim-token');\n      if (token) {\n        headers.set('authorization', `Bearer ${token}`);\n      }\n      return headers;\n    }\n  }),\n  tagTypes: ['Render'],\n  endpoints: builder => ({\n    getRenders: builder.query({\n      query: ({\n        caseId\n      }) => caseId ? `?caseId=${caseId}` : '',\n      providesTags: ['Render'],\n      // Mock data for development\n      transformResponse: () => [{\n        id: 'render-001',\n        caseId: 'case-001',\n        storyboardId: 'sb-001',\n        profile: 'neutral',\n        status: 'rendering',\n        progress: 65,\n        startTime: '2024-01-20T10:00:00Z',\n        framesRendered: 130,\n        totalFrames: 200,\n        renderTime: 1800,\n        seed: 42\n      }, {\n        id: 'render-002',\n        caseId: 'case-002',\n        storyboardId: 'sb-002',\n        profile: 'cinematic',\n        status: 'completed',\n        progress: 100,\n        startTime: '2024-01-19T14:30:00Z',\n        estimatedCompletion: '2024-01-19T15:30:00Z',\n        framesRendered: 300,\n        totalFrames: 300,\n        renderTime: 3600,\n        resultPath: '/renders/render-002.mp4',\n        checksum: 'a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456',\n        seed: 123\n      }]\n    }),\n    getRender: builder.query({\n      query: id => `/${id}`,\n      providesTags: (result, error, id) => [{\n        type: 'Render',\n        id\n      }]\n    }),\n    createRender: builder.mutation({\n      query: newRender => ({\n        url: '',\n        method: 'POST',\n        body: newRender\n      }),\n      invalidatesTags: ['Render']\n    }),\n    cancelRender: builder.mutation({\n      query: id => ({\n        url: `/${id}/cancel`,\n        method: 'POST'\n      }),\n      invalidatesTags: (result, error, id) => [{\n        type: 'Render',\n        id\n      }]\n    }),\n    retryRender: builder.mutation({\n      query: id => ({\n        url: `/${id}/retry`,\n        method: 'POST'\n      }),\n      invalidatesTags: (result, error, id) => [{\n        type: 'Render',\n        id\n      }]\n    }),\n    downloadRender: builder.mutation({\n      query: id => ({\n        url: `/${id}/download`,\n        method: 'GET'\n      })\n    }),\n    getRenderProgress: builder.query({\n      query: id => `/${id}/progress`,\n      providesTags: (result, error, id) => [{\n        type: 'Render',\n        id\n      }]\n    }),\n    getSystemMetrics: builder.query({\n      query: () => '/system/metrics',\n      // Mock system metrics\n      transformResponse: () => ({\n        cpuUsage: 45.2,\n        memoryUsage: 67.8,\n        gpuUsage: 23.1,\n        diskUsage: 34.5,\n        activeWorkers: 3,\n        queueLength: 2\n      })\n    })\n  })\n});\nexport const {\n  useGetRendersQuery,\n  useGetRenderQuery,\n  useCreateRenderMutation,\n  useCancelRenderMutation,\n  useRetryRenderMutation,\n  useDownloadRenderMutation,\n  useGetRenderProgressQuery,\n  useGetSystemMetricsQuery\n} = rendersApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","API_BASE_URL","process","env","REACT_APP_API_URL","rendersApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","token","localStorage","getItem","set","tagTypes","endpoints","builder","getRenders","query","caseId","providesTags","transformResponse","id","storyboardId","profile","status","progress","startTime","framesRendered","totalFrames","renderTime","seed","estimatedCompletion","resultPath","checksum","getRender","result","error","type","createRender","mutation","newRender","url","method","body","invalidatesTags","cancelRender","retryRender","downloadRender","getRenderProgress","getSystemMetrics","cpuUsage","memoryUsage","gpuUsage","diskUsage","activeWorkers","queueLength","useGetRendersQuery","useGetRenderQuery","useCreateRenderMutation","useCancelRenderMutation","useRetryRenderMutation","useDownloadRenderMutation","useGetRenderProgressQuery","useGetSystemMetricsQuery"],"sources":["/Users/jaylenjohnson18/Storyboard/web/case-dashboard/src/store/api/rendersApi.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport interface RenderJob {\n  id: string;\n  caseId: string;\n  storyboardId?: string;\n  profile: 'neutral' | 'cinematic';\n  status: 'queued' | 'rendering' | 'completed' | 'failed' | 'cancelled';\n  progress: number;\n  startTime: string;\n  estimatedCompletion?: string;\n  framesRendered: number;\n  totalFrames: number;\n  renderTime: number;\n  queuePosition?: number;\n  error?: string;\n  resultPath?: string;\n  checksum?: string;\n  seed?: number;\n}\n\nexport interface CreateRenderRequest {\n  caseId: string;\n  storyboardId?: string;\n  profile: 'neutral' | 'cinematic';\n  seed?: number;\n}\n\nexport interface RenderConfig {\n  resolution: '720p' | '1080p' | '4k';\n  frameRate: 24 | 30 | 60;\n  quality: 'draft' | 'standard' | 'high';\n  effects: boolean;\n  audio: boolean;\n}\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nexport const rendersApi = createApi({\n  reducerPath: 'rendersApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${API_BASE_URL}/api/v1/renders`,\n    prepareHeaders: (headers) => {\n      const token = localStorage.getItem('legal-sim-token');\n      if (token) {\n        headers.set('authorization', `Bearer ${token}`);\n      }\n      return headers;\n    },\n  }),\n  tagTypes: ['Render'],\n  endpoints: (builder) => ({\n    getRenders: builder.query<RenderJob[], { caseId?: string }>({\n      query: ({ caseId }) => (caseId ? `?caseId=${caseId}` : ''),\n      providesTags: ['Render'],\n      // Mock data for development\n      transformResponse: () => [\n        {\n          id: 'render-001',\n          caseId: 'case-001',\n          storyboardId: 'sb-001',\n          profile: 'neutral',\n          status: 'rendering',\n          progress: 65,\n          startTime: '2024-01-20T10:00:00Z',\n          framesRendered: 130,\n          totalFrames: 200,\n          renderTime: 1800,\n          seed: 42,\n        },\n        {\n          id: 'render-002',\n          caseId: 'case-002',\n          storyboardId: 'sb-002',\n          profile: 'cinematic',\n          status: 'completed',\n          progress: 100,\n          startTime: '2024-01-19T14:30:00Z',\n          estimatedCompletion: '2024-01-19T15:30:00Z',\n          framesRendered: 300,\n          totalFrames: 300,\n          renderTime: 3600,\n          resultPath: '/renders/render-002.mp4',\n          checksum: 'a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456',\n          seed: 123,\n        },\n      ],\n    }),\n    getRender: builder.query<RenderJob, string>({\n      query: (id) => `/${id}`,\n      providesTags: (result, error, id) => [{ type: 'Render', id }],\n    }),\n    createRender: builder.mutation<RenderJob, CreateRenderRequest>({\n      query: (newRender) => ({\n        url: '',\n        method: 'POST',\n        body: newRender,\n      }),\n      invalidatesTags: ['Render'],\n    }),\n    cancelRender: builder.mutation<void, string>({\n      query: (id) => ({\n        url: `/${id}/cancel`,\n        method: 'POST',\n      }),\n      invalidatesTags: (result, error, id) => [{ type: 'Render', id }],\n    }),\n    retryRender: builder.mutation<RenderJob, string>({\n      query: (id) => ({\n        url: `/${id}/retry`,\n        method: 'POST',\n      }),\n      invalidatesTags: (result, error, id) => [{ type: 'Render', id }],\n    }),\n    downloadRender: builder.mutation<{ downloadUrl: string }, string>({\n      query: (id) => ({\n        url: `/${id}/download`,\n        method: 'GET',\n      }),\n    }),\n    getRenderProgress: builder.query<RenderJob, string>({\n      query: (id) => `/${id}/progress`,\n      providesTags: (result, error, id) => [{ type: 'Render', id }],\n    }),\n    getSystemMetrics: builder.query<{\n      cpuUsage: number;\n      memoryUsage: number;\n      gpuUsage: number;\n      diskUsage: number;\n      activeWorkers: number;\n      queueLength: number;\n    }, void>({\n      query: () => '/system/metrics',\n      // Mock system metrics\n      transformResponse: () => ({\n        cpuUsage: 45.2,\n        memoryUsage: 67.8,\n        gpuUsage: 23.1,\n        diskUsage: 34.5,\n        activeWorkers: 3,\n        queueLength: 2,\n      }),\n    }),\n  }),\n});\n\nexport const {\n  useGetRendersQuery,\n  useGetRenderQuery,\n  useCreateRenderMutation,\n  useCancelRenderMutation,\n  useRetryRenderMutation,\n  useDownloadRenderMutation,\n  useGetRenderProgressQuery,\n  useGetSystemMetricsQuery,\n} = rendersApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}