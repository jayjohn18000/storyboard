{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  selectedEvidenceIds: [],\n  filters: {\n    type: 'all',\n    status: 'all',\n    caseId: 'all'\n  },\n  searchTerm: '',\n  sortBy: 'uploadedAt',\n  sortOrder: 'desc',\n  uploadProgress: {}\n};\nconst evidenceSlice = createSlice({\n  name: 'evidence',\n  initialState,\n  reducers: {\n    setSelectedEvidence: (state, action) => {\n      state.selectedEvidenceIds = action.payload;\n    },\n    toggleEvidenceSelection: (state, action) => {\n      const id = action.payload;\n      const index = state.selectedEvidenceIds.indexOf(id);\n      if (index === -1) {\n        state.selectedEvidenceIds.push(id);\n      } else {\n        state.selectedEvidenceIds.splice(index, 1);\n      }\n    },\n    clearEvidenceSelection: state => {\n      state.selectedEvidenceIds = [];\n    },\n    setFilters: (state, action) => {\n      state.filters = {\n        ...state.filters,\n        ...action.payload\n      };\n    },\n    setSearchTerm: (state, action) => {\n      state.searchTerm = action.payload;\n    },\n    setSorting: (state, action) => {\n      state.sortBy = action.payload.sortBy;\n      state.sortOrder = action.payload.sortOrder;\n    },\n    setUploadProgress: (state, action) => {\n      state.uploadProgress[action.payload.fileId] = action.payload.progress;\n    },\n    clearUploadProgress: (state, action) => {\n      delete state.uploadProgress[action.payload];\n    },\n    clearFilters: state => {\n      state.filters = {\n        type: 'all',\n        status: 'all',\n        caseId: 'all'\n      };\n      state.searchTerm = '';\n    }\n  }\n});\nexport const {\n  setSelectedEvidence,\n  toggleEvidenceSelection,\n  clearEvidenceSelection,\n  setFilters,\n  setSearchTerm,\n  setSorting,\n  setUploadProgress,\n  clearUploadProgress,\n  clearFilters\n} = evidenceSlice.actions;\nexport default evidenceSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","selectedEvidenceIds","filters","type","status","caseId","searchTerm","sortBy","sortOrder","uploadProgress","evidenceSlice","name","reducers","setSelectedEvidence","state","action","payload","toggleEvidenceSelection","id","index","indexOf","push","splice","clearEvidenceSelection","setFilters","setSearchTerm","setSorting","setUploadProgress","fileId","progress","clearUploadProgress","clearFilters","actions","reducer"],"sources":["/Users/jaylenjohnson18/Storyboard/web/case-dashboard/src/store/slices/evidenceSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Evidence } from '../api/evidenceApi';\n\ninterface EvidenceState {\n  selectedEvidenceIds: string[];\n  filters: {\n    type: string;\n    status: string;\n    caseId: string;\n  };\n  searchTerm: string;\n  sortBy: 'uploadedAt' | 'name' | 'size';\n  sortOrder: 'asc' | 'desc';\n  uploadProgress: Record<string, number>;\n}\n\nconst initialState: EvidenceState = {\n  selectedEvidenceIds: [],\n  filters: {\n    type: 'all',\n    status: 'all',\n    caseId: 'all',\n  },\n  searchTerm: '',\n  sortBy: 'uploadedAt',\n  sortOrder: 'desc',\n  uploadProgress: {},\n};\n\nconst evidenceSlice = createSlice({\n  name: 'evidence',\n  initialState,\n  reducers: {\n    setSelectedEvidence: (state, action: PayloadAction<string[]>) => {\n      state.selectedEvidenceIds = action.payload;\n    },\n    toggleEvidenceSelection: (state, action: PayloadAction<string>) => {\n      const id = action.payload;\n      const index = state.selectedEvidenceIds.indexOf(id);\n      if (index === -1) {\n        state.selectedEvidenceIds.push(id);\n      } else {\n        state.selectedEvidenceIds.splice(index, 1);\n      }\n    },\n    clearEvidenceSelection: (state) => {\n      state.selectedEvidenceIds = [];\n    },\n    setFilters: (state, action: PayloadAction<Partial<EvidenceState['filters']>>) => {\n      state.filters = { ...state.filters, ...action.payload };\n    },\n    setSearchTerm: (state, action: PayloadAction<string>) => {\n      state.searchTerm = action.payload;\n    },\n    setSorting: (state, action: PayloadAction<{ sortBy: EvidenceState['sortBy']; sortOrder: EvidenceState['sortOrder'] }>) => {\n      state.sortBy = action.payload.sortBy;\n      state.sortOrder = action.payload.sortOrder;\n    },\n    setUploadProgress: (state, action: PayloadAction<{ fileId: string; progress: number }>) => {\n      state.uploadProgress[action.payload.fileId] = action.payload.progress;\n    },\n    clearUploadProgress: (state, action: PayloadAction<string>) => {\n      delete state.uploadProgress[action.payload];\n    },\n    clearFilters: (state) => {\n      state.filters = {\n        type: 'all',\n        status: 'all',\n        caseId: 'all',\n      };\n      state.searchTerm = '';\n    },\n  },\n});\n\nexport const {\n  setSelectedEvidence,\n  toggleEvidenceSelection,\n  clearEvidenceSelection,\n  setFilters,\n  setSearchTerm,\n  setSorting,\n  setUploadProgress,\n  clearUploadProgress,\n  clearFilters,\n} = evidenceSlice.actions;\n\nexport default evidenceSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAgB7D,MAAMC,YAA2B,GAAG;EAClCC,mBAAmB,EAAE,EAAE;EACvBC,OAAO,EAAE;IACPC,IAAI,EAAE,KAAK;IACXC,MAAM,EAAE,KAAK;IACbC,MAAM,EAAE;EACV,CAAC;EACDC,UAAU,EAAE,EAAE;EACdC,MAAM,EAAE,YAAY;EACpBC,SAAS,EAAE,MAAM;EACjBC,cAAc,EAAE,CAAC;AACnB,CAAC;AAED,MAAMC,aAAa,GAAGX,WAAW,CAAC;EAChCY,IAAI,EAAE,UAAU;EAChBX,YAAY;EACZY,QAAQ,EAAE;IACRC,mBAAmB,EAAEA,CAACC,KAAK,EAAEC,MAA+B,KAAK;MAC/DD,KAAK,CAACb,mBAAmB,GAAGc,MAAM,CAACC,OAAO;IAC5C,CAAC;IACDC,uBAAuB,EAAEA,CAACH,KAAK,EAAEC,MAA6B,KAAK;MACjE,MAAMG,EAAE,GAAGH,MAAM,CAACC,OAAO;MACzB,MAAMG,KAAK,GAAGL,KAAK,CAACb,mBAAmB,CAACmB,OAAO,CAACF,EAAE,CAAC;MACnD,IAAIC,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBL,KAAK,CAACb,mBAAmB,CAACoB,IAAI,CAACH,EAAE,CAAC;MACpC,CAAC,MAAM;QACLJ,KAAK,CAACb,mBAAmB,CAACqB,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;MAC5C;IACF,CAAC;IACDI,sBAAsB,EAAGT,KAAK,IAAK;MACjCA,KAAK,CAACb,mBAAmB,GAAG,EAAE;IAChC,CAAC;IACDuB,UAAU,EAAEA,CAACV,KAAK,EAAEC,MAAwD,KAAK;MAC/ED,KAAK,CAACZ,OAAO,GAAG;QAAE,GAAGY,KAAK,CAACZ,OAAO;QAAE,GAAGa,MAAM,CAACC;MAAQ,CAAC;IACzD,CAAC;IACDS,aAAa,EAAEA,CAACX,KAAK,EAAEC,MAA6B,KAAK;MACvDD,KAAK,CAACR,UAAU,GAAGS,MAAM,CAACC,OAAO;IACnC,CAAC;IACDU,UAAU,EAAEA,CAACZ,KAAK,EAAEC,MAAiG,KAAK;MACxHD,KAAK,CAACP,MAAM,GAAGQ,MAAM,CAACC,OAAO,CAACT,MAAM;MACpCO,KAAK,CAACN,SAAS,GAAGO,MAAM,CAACC,OAAO,CAACR,SAAS;IAC5C,CAAC;IACDmB,iBAAiB,EAAEA,CAACb,KAAK,EAAEC,MAA2D,KAAK;MACzFD,KAAK,CAACL,cAAc,CAACM,MAAM,CAACC,OAAO,CAACY,MAAM,CAAC,GAAGb,MAAM,CAACC,OAAO,CAACa,QAAQ;IACvE,CAAC;IACDC,mBAAmB,EAAEA,CAAChB,KAAK,EAAEC,MAA6B,KAAK;MAC7D,OAAOD,KAAK,CAACL,cAAc,CAACM,MAAM,CAACC,OAAO,CAAC;IAC7C,CAAC;IACDe,YAAY,EAAGjB,KAAK,IAAK;MACvBA,KAAK,CAACZ,OAAO,GAAG;QACdC,IAAI,EAAE,KAAK;QACXC,MAAM,EAAE,KAAK;QACbC,MAAM,EAAE;MACV,CAAC;MACDS,KAAK,CAACR,UAAU,GAAG,EAAE;IACvB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXO,mBAAmB;EACnBI,uBAAuB;EACvBM,sBAAsB;EACtBC,UAAU;EACVC,aAAa;EACbC,UAAU;EACVC,iBAAiB;EACjBG,mBAAmB;EACnBC;AACF,CAAC,GAAGrB,aAAa,CAACsB,OAAO;AAEzB,eAAetB,aAAa,CAACuB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}