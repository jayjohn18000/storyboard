{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nexport const casesApi = createApi({\n  reducerPath: 'casesApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${API_BASE_URL}/api/v1/cases`,\n    prepareHeaders: headers => {\n      const token = localStorage.getItem('legal-sim-token');\n      if (token) {\n        headers.set('authorization', `Bearer ${token}`);\n      }\n      return headers;\n    }\n  }),\n  tagTypes: ['Case'],\n  endpoints: builder => ({\n    getCases: builder.query({\n      query: () => '',\n      providesTags: ['Case'],\n      transformResponse: response => {\n        // Transform backend response to frontend format\n        return response.map(caseData => {\n          var _caseData$metadata, _caseData$metadata2, _caseData$metadata3, _caseData$status, _caseData$metadata4, _caseData$evidence_id, _caseData$storyboard_, _caseData$render_ids;\n          return {\n            id: caseData.id,\n            title: ((_caseData$metadata = caseData.metadata) === null || _caseData$metadata === void 0 ? void 0 : _caseData$metadata.title) || caseData.title,\n            mode: ((_caseData$metadata2 = caseData.metadata) === null || _caseData$metadata2 === void 0 ? void 0 : _caseData$metadata2.case_type) === 'DEMONSTRATIVE' ? 'demonstrative' : 'sandbox',\n            jurisdiction: ((_caseData$metadata3 = caseData.metadata) === null || _caseData$metadata3 === void 0 ? void 0 : _caseData$metadata3.jurisdiction) || 'Unknown',\n            status: ((_caseData$status = caseData.status) === null || _caseData$status === void 0 ? void 0 : _caseData$status.toLowerCase()) || 'draft',\n            createdAt: caseData.created_at,\n            updatedAt: caseData.updated_at,\n            createdBy: ((_caseData$metadata4 = caseData.metadata) === null || _caseData$metadata4 === void 0 ? void 0 : _caseData$metadata4.created_by) || caseData.created_by || 'Unknown',\n            evidenceCount: ((_caseData$evidence_id = caseData.evidence_ids) === null || _caseData$evidence_id === void 0 ? void 0 : _caseData$evidence_id.length) || 0,\n            storyboardCount: ((_caseData$storyboard_ = caseData.storyboard_ids) === null || _caseData$storyboard_ === void 0 ? void 0 : _caseData$storyboard_.length) || 0,\n            renderCount: ((_caseData$render_ids = caseData.render_ids) === null || _caseData$render_ids === void 0 ? void 0 : _caseData$render_ids.length) || 0,\n            validationStatus: 'pending',\n            coveragePercentage: 0\n          };\n        });\n      }\n    }),\n    getCase: builder.query({\n      query: id => `/${id}`,\n      providesTags: (result, error, id) => [{\n        type: 'Case',\n        id\n      }],\n      transformResponse: response => {\n        var _response$metadata, _response$metadata2, _response$metadata3, _response$status, _response$metadata4, _response$evidence_id, _response$storyboard_, _response$render_ids;\n        return {\n          id: response.id,\n          title: ((_response$metadata = response.metadata) === null || _response$metadata === void 0 ? void 0 : _response$metadata.title) || response.title,\n          mode: ((_response$metadata2 = response.metadata) === null || _response$metadata2 === void 0 ? void 0 : _response$metadata2.case_type) === 'DEMONSTRATIVE' ? 'demonstrative' : 'sandbox',\n          jurisdiction: ((_response$metadata3 = response.metadata) === null || _response$metadata3 === void 0 ? void 0 : _response$metadata3.jurisdiction) || 'Unknown',\n          status: ((_response$status = response.status) === null || _response$status === void 0 ? void 0 : _response$status.toLowerCase()) || 'draft',\n          createdAt: response.created_at,\n          updatedAt: response.updated_at,\n          createdBy: ((_response$metadata4 = response.metadata) === null || _response$metadata4 === void 0 ? void 0 : _response$metadata4.created_by) || response.created_by || 'Unknown',\n          evidenceCount: ((_response$evidence_id = response.evidence_ids) === null || _response$evidence_id === void 0 ? void 0 : _response$evidence_id.length) || 0,\n          storyboardCount: ((_response$storyboard_ = response.storyboard_ids) === null || _response$storyboard_ === void 0 ? void 0 : _response$storyboard_.length) || 0,\n          renderCount: ((_response$render_ids = response.render_ids) === null || _response$render_ids === void 0 ? void 0 : _response$render_ids.length) || 0,\n          validationStatus: 'pending',\n          coveragePercentage: 0\n        };\n      }\n    }),\n    createCase: builder.mutation({\n      query: newCase => ({\n        url: '',\n        method: 'POST',\n        body: newCase\n      }),\n      invalidatesTags: ['Case']\n    }),\n    updateCase: builder.mutation({\n      query: ({\n        id,\n        ...updates\n      }) => ({\n        url: `/${id}`,\n        method: 'PATCH',\n        body: updates\n      }),\n      invalidatesTags: (result, error, {\n        id\n      }) => [{\n        type: 'Case',\n        id\n      }]\n    }),\n    deleteCase: builder.mutation({\n      query: id => ({\n        url: `/${id}`,\n        method: 'DELETE'\n      }),\n      invalidatesTags: ['Case']\n    })\n  })\n});\nexport const {\n  useGetCasesQuery,\n  useGetCaseQuery,\n  useCreateCaseMutation,\n  useUpdateCaseMutation,\n  useDeleteCaseMutation\n} = casesApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","API_BASE_URL","process","env","REACT_APP_API_URL","casesApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","token","localStorage","getItem","set","tagTypes","endpoints","builder","getCases","query","providesTags","transformResponse","response","map","caseData","_caseData$metadata","_caseData$metadata2","_caseData$metadata3","_caseData$status","_caseData$metadata4","_caseData$evidence_id","_caseData$storyboard_","_caseData$render_ids","id","title","metadata","mode","case_type","jurisdiction","status","toLowerCase","createdAt","created_at","updatedAt","updated_at","createdBy","created_by","evidenceCount","evidence_ids","length","storyboardCount","storyboard_ids","renderCount","render_ids","validationStatus","coveragePercentage","getCase","result","error","type","_response$metadata","_response$metadata2","_response$metadata3","_response$status","_response$metadata4","_response$evidence_id","_response$storyboard_","_response$render_ids","createCase","mutation","newCase","url","method","body","invalidatesTags","updateCase","updates","deleteCase","useGetCasesQuery","useGetCaseQuery","useCreateCaseMutation","useUpdateCaseMutation","useDeleteCaseMutation"],"sources":["/Users/jaylenjohnson18/Storyboard/web/case-dashboard/src/store/api/casesApi.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport interface Case {\n  id: string;\n  title: string;\n  mode: 'sandbox' | 'demonstrative';\n  jurisdiction: string;\n  status: 'draft' | 'in_review' | 'approved' | 'locked';\n  createdAt: string;\n  updatedAt: string;\n  createdBy: string;\n  evidenceCount: number;\n  storyboardCount: number;\n  renderCount: number;\n  validationStatus: 'valid' | 'invalid' | 'pending';\n  coveragePercentage: number;\n}\n\nexport interface CreateCaseRequest {\n  title: string;\n  mode: 'sandbox' | 'demonstrative';\n  jurisdiction: string;\n  description?: string;\n}\n\nexport interface UpdateCaseRequest {\n  id: string;\n  title?: string;\n  mode?: 'sandbox' | 'demonstrative';\n  jurisdiction?: string;\n  status?: 'draft' | 'in_review' | 'approved' | 'locked';\n  description?: string;\n}\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nexport const casesApi = createApi({\n  reducerPath: 'casesApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${API_BASE_URL}/api/v1/cases`,\n    prepareHeaders: (headers) => {\n      const token = localStorage.getItem('legal-sim-token');\n      if (token) {\n        headers.set('authorization', `Bearer ${token}`);\n      }\n      return headers;\n    },\n  }),\n  tagTypes: ['Case'],\n  endpoints: (builder) => ({\n    getCases: builder.query<Case[], void>({\n      query: () => '',\n      providesTags: ['Case'],\n      transformResponse: (response: any[]) => {\n        // Transform backend response to frontend format\n        return response.map(caseData => ({\n          id: caseData.id,\n          title: caseData.metadata?.title || caseData.title,\n          mode: caseData.metadata?.case_type === 'DEMONSTRATIVE' ? 'demonstrative' : 'sandbox',\n          jurisdiction: caseData.metadata?.jurisdiction || 'Unknown',\n          status: caseData.status?.toLowerCase() || 'draft',\n          createdAt: caseData.created_at,\n          updatedAt: caseData.updated_at,\n          createdBy: caseData.metadata?.created_by || caseData.created_by || 'Unknown',\n          evidenceCount: caseData.evidence_ids?.length || 0,\n          storyboardCount: caseData.storyboard_ids?.length || 0,\n          renderCount: caseData.render_ids?.length || 0,\n          validationStatus: 'pending' as const,\n          coveragePercentage: 0,\n        }));\n      },\n    }),\n    getCase: builder.query<Case, string>({\n      query: (id) => `/${id}`,\n      providesTags: (result, error, id) => [{ type: 'Case', id }],\n      transformResponse: (response: any) => ({\n        id: response.id,\n        title: response.metadata?.title || response.title,\n        mode: response.metadata?.case_type === 'DEMONSTRATIVE' ? 'demonstrative' : 'sandbox',\n        jurisdiction: response.metadata?.jurisdiction || 'Unknown',\n        status: response.status?.toLowerCase() || 'draft',\n        createdAt: response.created_at,\n        updatedAt: response.updated_at,\n        createdBy: response.metadata?.created_by || response.created_by || 'Unknown',\n        evidenceCount: response.evidence_ids?.length || 0,\n        storyboardCount: response.storyboard_ids?.length || 0,\n        renderCount: response.render_ids?.length || 0,\n        validationStatus: 'pending' as const,\n        coveragePercentage: 0,\n      }),\n    }),\n    createCase: builder.mutation<Case, CreateCaseRequest>({\n      query: (newCase) => ({\n        url: '',\n        method: 'POST',\n        body: newCase,\n      }),\n      invalidatesTags: ['Case'],\n    }),\n    updateCase: builder.mutation<Case, UpdateCaseRequest>({\n      query: ({ id, ...updates }) => ({\n        url: `/${id}`,\n        method: 'PATCH',\n        body: updates,\n      }),\n      invalidatesTags: (result, error, { id }) => [{ type: 'Case', id }],\n    }),\n    deleteCase: builder.mutation<void, string>({\n      query: (id) => ({\n        url: `/${id}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['Case'],\n    }),\n  }),\n});\n\nexport const {\n  useGetCasesQuery,\n  useGetCaseQuery,\n  useCreateCaseMutation,\n  useUpdateCaseMutation,\n  useDeleteCaseMutation,\n} = casesApi;\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAkCxE,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,OAAO,MAAMC,QAAQ,GAAGN,SAAS,CAAC;EAChCO,WAAW,EAAE,UAAU;EACvBC,SAAS,EAAEP,cAAc,CAAC;IACxBQ,OAAO,EAAE,GAAGP,YAAY,eAAe;IACvCQ,cAAc,EAAGC,OAAO,IAAK;MAC3B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;MACrD,IAAIF,KAAK,EAAE;QACTD,OAAO,CAACI,GAAG,CAAC,eAAe,EAAE,UAAUH,KAAK,EAAE,CAAC;MACjD;MACA,OAAOD,OAAO;IAChB;EACF,CAAC,CAAC;EACFK,QAAQ,EAAE,CAAC,MAAM,CAAC;EAClBC,SAAS,EAAGC,OAAO,KAAM;IACvBC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAe;MACpCA,KAAK,EAAEA,CAAA,KAAM,EAAE;MACfC,YAAY,EAAE,CAAC,MAAM,CAAC;MACtBC,iBAAiB,EAAGC,QAAe,IAAK;QACtC;QACA,OAAOA,QAAQ,CAACC,GAAG,CAACC,QAAQ;UAAA,IAAAC,kBAAA,EAAAC,mBAAA,EAAAC,mBAAA,EAAAC,gBAAA,EAAAC,mBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,oBAAA;UAAA,OAAK;YAC/BC,EAAE,EAAET,QAAQ,CAACS,EAAE;YACfC,KAAK,EAAE,EAAAT,kBAAA,GAAAD,QAAQ,CAACW,QAAQ,cAAAV,kBAAA,uBAAjBA,kBAAA,CAAmBS,KAAK,KAAIV,QAAQ,CAACU,KAAK;YACjDE,IAAI,EAAE,EAAAV,mBAAA,GAAAF,QAAQ,CAACW,QAAQ,cAAAT,mBAAA,uBAAjBA,mBAAA,CAAmBW,SAAS,MAAK,eAAe,GAAG,eAAe,GAAG,SAAS;YACpFC,YAAY,EAAE,EAAAX,mBAAA,GAAAH,QAAQ,CAACW,QAAQ,cAAAR,mBAAA,uBAAjBA,mBAAA,CAAmBW,YAAY,KAAI,SAAS;YAC1DC,MAAM,EAAE,EAAAX,gBAAA,GAAAJ,QAAQ,CAACe,MAAM,cAAAX,gBAAA,uBAAfA,gBAAA,CAAiBY,WAAW,CAAC,CAAC,KAAI,OAAO;YACjDC,SAAS,EAAEjB,QAAQ,CAACkB,UAAU;YAC9BC,SAAS,EAAEnB,QAAQ,CAACoB,UAAU;YAC9BC,SAAS,EAAE,EAAAhB,mBAAA,GAAAL,QAAQ,CAACW,QAAQ,cAAAN,mBAAA,uBAAjBA,mBAAA,CAAmBiB,UAAU,KAAItB,QAAQ,CAACsB,UAAU,IAAI,SAAS;YAC5EC,aAAa,EAAE,EAAAjB,qBAAA,GAAAN,QAAQ,CAACwB,YAAY,cAAAlB,qBAAA,uBAArBA,qBAAA,CAAuBmB,MAAM,KAAI,CAAC;YACjDC,eAAe,EAAE,EAAAnB,qBAAA,GAAAP,QAAQ,CAAC2B,cAAc,cAAApB,qBAAA,uBAAvBA,qBAAA,CAAyBkB,MAAM,KAAI,CAAC;YACrDG,WAAW,EAAE,EAAApB,oBAAA,GAAAR,QAAQ,CAAC6B,UAAU,cAAArB,oBAAA,uBAAnBA,oBAAA,CAAqBiB,MAAM,KAAI,CAAC;YAC7CK,gBAAgB,EAAE,SAAkB;YACpCC,kBAAkB,EAAE;UACtB,CAAC;QAAA,CAAC,CAAC;MACL;IACF,CAAC,CAAC;IACFC,OAAO,EAAEvC,OAAO,CAACE,KAAK,CAAe;MACnCA,KAAK,EAAGc,EAAE,IAAK,IAAIA,EAAE,EAAE;MACvBb,YAAY,EAAEA,CAACqC,MAAM,EAAEC,KAAK,EAAEzB,EAAE,KAAK,CAAC;QAAE0B,IAAI,EAAE,MAAM;QAAE1B;MAAG,CAAC,CAAC;MAC3DZ,iBAAiB,EAAGC,QAAa;QAAA,IAAAsC,kBAAA,EAAAC,mBAAA,EAAAC,mBAAA,EAAAC,gBAAA,EAAAC,mBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,oBAAA;QAAA,OAAM;UACrClC,EAAE,EAAEX,QAAQ,CAACW,EAAE;UACfC,KAAK,EAAE,EAAA0B,kBAAA,GAAAtC,QAAQ,CAACa,QAAQ,cAAAyB,kBAAA,uBAAjBA,kBAAA,CAAmB1B,KAAK,KAAIZ,QAAQ,CAACY,KAAK;UACjDE,IAAI,EAAE,EAAAyB,mBAAA,GAAAvC,QAAQ,CAACa,QAAQ,cAAA0B,mBAAA,uBAAjBA,mBAAA,CAAmBxB,SAAS,MAAK,eAAe,GAAG,eAAe,GAAG,SAAS;UACpFC,YAAY,EAAE,EAAAwB,mBAAA,GAAAxC,QAAQ,CAACa,QAAQ,cAAA2B,mBAAA,uBAAjBA,mBAAA,CAAmBxB,YAAY,KAAI,SAAS;UAC1DC,MAAM,EAAE,EAAAwB,gBAAA,GAAAzC,QAAQ,CAACiB,MAAM,cAAAwB,gBAAA,uBAAfA,gBAAA,CAAiBvB,WAAW,CAAC,CAAC,KAAI,OAAO;UACjDC,SAAS,EAAEnB,QAAQ,CAACoB,UAAU;UAC9BC,SAAS,EAAErB,QAAQ,CAACsB,UAAU;UAC9BC,SAAS,EAAE,EAAAmB,mBAAA,GAAA1C,QAAQ,CAACa,QAAQ,cAAA6B,mBAAA,uBAAjBA,mBAAA,CAAmBlB,UAAU,KAAIxB,QAAQ,CAACwB,UAAU,IAAI,SAAS;UAC5EC,aAAa,EAAE,EAAAkB,qBAAA,GAAA3C,QAAQ,CAAC0B,YAAY,cAAAiB,qBAAA,uBAArBA,qBAAA,CAAuBhB,MAAM,KAAI,CAAC;UACjDC,eAAe,EAAE,EAAAgB,qBAAA,GAAA5C,QAAQ,CAAC6B,cAAc,cAAAe,qBAAA,uBAAvBA,qBAAA,CAAyBjB,MAAM,KAAI,CAAC;UACrDG,WAAW,EAAE,EAAAe,oBAAA,GAAA7C,QAAQ,CAAC+B,UAAU,cAAAc,oBAAA,uBAAnBA,oBAAA,CAAqBlB,MAAM,KAAI,CAAC;UAC7CK,gBAAgB,EAAE,SAAkB;UACpCC,kBAAkB,EAAE;QACtB,CAAC;MAAA;IACH,CAAC,CAAC;IACFa,UAAU,EAAEnD,OAAO,CAACoD,QAAQ,CAA0B;MACpDlD,KAAK,EAAGmD,OAAO,KAAM;QACnBC,GAAG,EAAE,EAAE;QACPC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEH;MACR,CAAC,CAAC;MACFI,eAAe,EAAE,CAAC,MAAM;IAC1B,CAAC,CAAC;IACFC,UAAU,EAAE1D,OAAO,CAACoD,QAAQ,CAA0B;MACpDlD,KAAK,EAAEA,CAAC;QAAEc,EAAE;QAAE,GAAG2C;MAAQ,CAAC,MAAM;QAC9BL,GAAG,EAAE,IAAItC,EAAE,EAAE;QACbuC,MAAM,EAAE,OAAO;QACfC,IAAI,EAAEG;MACR,CAAC,CAAC;MACFF,eAAe,EAAEA,CAACjB,MAAM,EAAEC,KAAK,EAAE;QAAEzB;MAAG,CAAC,KAAK,CAAC;QAAE0B,IAAI,EAAE,MAAM;QAAE1B;MAAG,CAAC;IACnE,CAAC,CAAC;IACF4C,UAAU,EAAE5D,OAAO,CAACoD,QAAQ,CAAe;MACzClD,KAAK,EAAGc,EAAE,KAAM;QACdsC,GAAG,EAAE,IAAItC,EAAE,EAAE;QACbuC,MAAM,EAAE;MACV,CAAC,CAAC;MACFE,eAAe,EAAE,CAAC,MAAM;IAC1B,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EACXI,gBAAgB;EAChBC,eAAe;EACfC,qBAAqB;EACrBC,qBAAqB;EACrBC;AACF,CAAC,GAAG7E,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}