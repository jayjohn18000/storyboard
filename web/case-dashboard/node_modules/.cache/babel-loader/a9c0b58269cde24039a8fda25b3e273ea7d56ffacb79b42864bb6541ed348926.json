{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nexport const storyboardsApi = createApi({\n  reducerPath: 'storyboardsApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${API_BASE_URL}/api/v1/storyboards`,\n    prepareHeaders: headers => {\n      const token = localStorage.getItem('legal-sim-token');\n      if (token) {\n        headers.set('authorization', `Bearer ${token}`);\n      }\n      return headers;\n    }\n  }),\n  tagTypes: ['Storyboard'],\n  endpoints: builder => ({\n    getStoryboards: builder.query({\n      query: ({\n        caseId\n      }) => caseId ? `?case_id_filter=${caseId}` : '',\n      providesTags: ['Storyboard'],\n      transformResponse: response => {\n        return response.map(storyboard => {\n          var _storyboard$validatio, _storyboard$validatio2;\n          return {\n            id: storyboard.id,\n            caseId: storyboard.case_id,\n            title: storyboard.title,\n            content: storyboard.content || '',\n            beats: [],\n            // Will be parsed from content\n            isValid: ((_storyboard$validatio = storyboard.validation_result) === null || _storyboard$validatio === void 0 ? void 0 : _storyboard$validatio.is_valid) || false,\n            validationErrors: ((_storyboard$validatio2 = storyboard.validation_result) === null || _storyboard$validatio2 === void 0 ? void 0 : _storyboard$validatio2.errors) || [],\n            createdAt: storyboard.created_at,\n            updatedAt: storyboard.updated_at,\n            createdBy: storyboard.created_by || 'Unknown'\n          };\n        });\n      }\n    }),\n    getStoryboard: builder.query({\n      query: id => `/${id}`,\n      providesTags: (result, error, id) => [{\n        type: 'Storyboard',\n        id\n      }]\n    }),\n    createStoryboard: builder.mutation({\n      query: newStoryboard => ({\n        url: '',\n        method: 'POST',\n        body: newStoryboard\n      }),\n      invalidatesTags: ['Storyboard']\n    }),\n    updateStoryboard: builder.mutation({\n      query: ({\n        id,\n        ...updates\n      }) => ({\n        url: `/${id}`,\n        method: 'PATCH',\n        body: updates\n      }),\n      invalidatesTags: (result, error, {\n        id\n      }) => [{\n        type: 'Storyboard',\n        id\n      }]\n    }),\n    deleteStoryboard: builder.mutation({\n      query: id => ({\n        url: `/${id}`,\n        method: 'DELETE'\n      }),\n      invalidatesTags: ['Storyboard']\n    }),\n    validateStoryboard: builder.mutation({\n      query: ({\n        id,\n        content\n      }) => ({\n        url: `/${id}/validate`,\n        method: 'POST',\n        body: {\n          content\n        }\n      })\n    }),\n    parseStoryboard: builder.mutation({\n      query: ({\n        content\n      }) => ({\n        url: '/parse',\n        method: 'POST',\n        body: {\n          content\n        }\n      })\n    })\n  })\n});\nexport const {\n  useGetStoryboardsQuery,\n  useGetStoryboardQuery,\n  useCreateStoryboardMutation,\n  useUpdateStoryboardMutation,\n  useDeleteStoryboardMutation,\n  useValidateStoryboardMutation,\n  useParseStoryboardMutation\n} = storyboardsApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","API_BASE_URL","process","env","REACT_APP_API_URL","storyboardsApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","token","localStorage","getItem","set","tagTypes","endpoints","builder","getStoryboards","query","caseId","providesTags","transformResponse","response","map","storyboard","_storyboard$validatio","_storyboard$validatio2","id","case_id","title","content","beats","isValid","validation_result","is_valid","validationErrors","errors","createdAt","created_at","updatedAt","updated_at","createdBy","created_by","getStoryboard","result","error","type","createStoryboard","mutation","newStoryboard","url","method","body","invalidatesTags","updateStoryboard","updates","deleteStoryboard","validateStoryboard","parseStoryboard","useGetStoryboardsQuery","useGetStoryboardQuery","useCreateStoryboardMutation","useUpdateStoryboardMutation","useDeleteStoryboardMutation","useValidateStoryboardMutation","useParseStoryboardMutation"],"sources":["/Users/jaylenjohnson18/Storyboard/web/case-dashboard/src/store/api/storyboardsApi.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport interface StoryboardBeat {\n  id: string;\n  timestamp: number;\n  description: string;\n  actors: string[];\n  evidenceAnchors: EvidenceAnchor[];\n  confidence: number;\n  disputed: boolean;\n  duration: number;\n}\n\nexport interface EvidenceAnchor {\n  evidenceId: string;\n  timestamp?: number;\n  pageNumber?: number;\n  description: string;\n}\n\nexport interface Storyboard {\n  id: string;\n  caseId: string;\n  title: string;\n  content: string;\n  beats: StoryboardBeat[];\n  isValid: boolean;\n  validationErrors: string[];\n  createdAt: string;\n  updatedAt: string;\n  createdBy: string;\n}\n\nexport interface CreateStoryboardRequest {\n  caseId: string;\n  title: string;\n  content?: string;\n}\n\nexport interface UpdateStoryboardRequest {\n  id: string;\n  title?: string;\n  content?: string;\n}\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nexport const storyboardsApi = createApi({\n  reducerPath: 'storyboardsApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${API_BASE_URL}/api/v1/storyboards`,\n    prepareHeaders: (headers) => {\n      const token = localStorage.getItem('legal-sim-token');\n      if (token) {\n        headers.set('authorization', `Bearer ${token}`);\n      }\n      return headers;\n    },\n  }),\n  tagTypes: ['Storyboard'],\n  endpoints: (builder) => ({\n    getStoryboards: builder.query<Storyboard[], { caseId?: string }>({\n      query: ({ caseId }) => (caseId ? `?case_id_filter=${caseId}` : ''),\n      providesTags: ['Storyboard'],\n      transformResponse: (response: any[]) => {\n        return response.map(storyboard => ({\n          id: storyboard.id,\n          caseId: storyboard.case_id,\n          title: storyboard.title,\n          content: storyboard.content || '',\n          beats: [], // Will be parsed from content\n          isValid: storyboard.validation_result?.is_valid || false,\n          validationErrors: storyboard.validation_result?.errors || [],\n          createdAt: storyboard.created_at,\n          updatedAt: storyboard.updated_at,\n          createdBy: storyboard.created_by || 'Unknown',\n        }));\n      },\n    }),\n    getStoryboard: builder.query<Storyboard, string>({\n      query: (id) => `/${id}`,\n      providesTags: (result, error, id) => [{ type: 'Storyboard', id }],\n    }),\n    createStoryboard: builder.mutation<Storyboard, CreateStoryboardRequest>({\n      query: (newStoryboard) => ({\n        url: '',\n        method: 'POST',\n        body: newStoryboard,\n      }),\n      invalidatesTags: ['Storyboard'],\n    }),\n    updateStoryboard: builder.mutation<Storyboard, UpdateStoryboardRequest>({\n      query: ({ id, ...updates }) => ({\n        url: `/${id}`,\n        method: 'PATCH',\n        body: updates,\n      }),\n      invalidatesTags: (result, error, { id }) => [{ type: 'Storyboard', id }],\n    }),\n    deleteStoryboard: builder.mutation<void, string>({\n      query: (id) => ({\n        url: `/${id}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['Storyboard'],\n    }),\n    validateStoryboard: builder.mutation<{ isValid: boolean; errors: string[] }, { id: string; content: string }>({\n      query: ({ id, content }) => ({\n        url: `/${id}/validate`,\n        method: 'POST',\n        body: { content },\n      }),\n    }),\n    parseStoryboard: builder.mutation<{ beats: StoryboardBeat[] }, { content: string }>({\n      query: ({ content }) => ({\n        url: '/parse',\n        method: 'POST',\n        body: { content },\n      }),\n    }),\n  }),\n});\n\nexport const {\n  useGetStoryboardsQuery,\n  useGetStoryboardQuery,\n  useCreateStoryboardMutation,\n  useUpdateStoryboardMutation,\n  useDeleteStoryboardMutation,\n  useValidateStoryboardMutation,\n  useParseStoryboardMutation,\n} = storyboardsApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}