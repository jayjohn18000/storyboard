{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nexport const authApi = createApi({\n  reducerPath: 'authApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${API_BASE_URL}/api/v1/auth`,\n    prepareHeaders: headers => {\n      const token = localStorage.getItem('legal-sim-token');\n      if (token) {\n        headers.set('authorization', `Bearer ${token}`);\n      }\n      return headers;\n    }\n  }),\n  tagTypes: ['User'],\n  endpoints: builder => ({\n    login: builder.mutation({\n      query: credentials => ({\n        url: '/login',\n        method: 'POST',\n        body: credentials\n      }),\n      invalidatesTags: ['User'],\n      // Mock login for development\n      transformResponse: (response, meta, arg) => ({\n        user: {\n          id: 'user-001',\n          email: arg.email,\n          name: arg.email.split('@')[0],\n          role: 'attorney'\n        },\n        token: 'mock-jwt-token',\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()\n      })\n    }),\n    register: builder.mutation({\n      query: userData => ({\n        url: '/register',\n        method: 'POST',\n        body: userData\n      }),\n      invalidatesTags: ['User']\n    }),\n    logout: builder.mutation({\n      query: () => ({\n        url: '/logout',\n        method: 'POST'\n      }),\n      invalidatesTags: ['User']\n    }),\n    refreshToken: builder.mutation({\n      query: () => ({\n        url: '/refresh',\n        method: 'POST'\n      })\n    }),\n    getCurrentUser: builder.query({\n      query: () => '/me',\n      providesTags: ['User'],\n      // Mock current user for development\n      transformResponse: () => ({\n        id: 'user-001',\n        email: 'demo@legal-sim.com',\n        name: 'Demo User',\n        role: 'attorney'\n      })\n    }),\n    updateProfile: builder.mutation({\n      query: updates => ({\n        url: '/profile',\n        method: 'PATCH',\n        body: updates\n      }),\n      invalidatesTags: ['User']\n    }),\n    changePassword: builder.mutation({\n      query: passwords => ({\n        url: '/change-password',\n        method: 'POST',\n        body: passwords\n      })\n    })\n  })\n});\nexport const {\n  useLoginMutation,\n  useRegisterMutation,\n  useLogoutMutation,\n  useRefreshTokenMutation,\n  useGetCurrentUserQuery,\n  useUpdateProfileMutation,\n  useChangePasswordMutation\n} = authApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","API_BASE_URL","process","env","REACT_APP_API_URL","authApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","token","localStorage","getItem","set","tagTypes","endpoints","builder","login","mutation","query","credentials","url","method","body","invalidatesTags","transformResponse","response","meta","arg","user","id","email","name","split","role","expiresAt","Date","now","toISOString","register","userData","logout","refreshToken","getCurrentUser","providesTags","updateProfile","updates","changePassword","passwords","useLoginMutation","useRegisterMutation","useLogoutMutation","useRefreshTokenMutation","useGetCurrentUserQuery","useUpdateProfileMutation","useChangePasswordMutation"],"sources":["/Users/jaylenjohnson18/Storyboard/web/case-dashboard/src/store/api/authApi.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  role: 'admin' | 'attorney' | 'viewer';\n}\n\nexport interface LoginRequest {\n  email: string;\n  password: string;\n}\n\nexport interface LoginResponse {\n  user: User;\n  token: string;\n  expiresAt: string;\n}\n\nexport interface RegisterRequest {\n  email: string;\n  password: string;\n  name: string;\n  role?: 'attorney' | 'viewer';\n}\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nexport const authApi = createApi({\n  reducerPath: 'authApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${API_BASE_URL}/api/v1/auth`,\n    prepareHeaders: (headers) => {\n      const token = localStorage.getItem('legal-sim-token');\n      if (token) {\n        headers.set('authorization', `Bearer ${token}`);\n      }\n      return headers;\n    },\n  }),\n  tagTypes: ['User'],\n  endpoints: (builder) => ({\n    login: builder.mutation<LoginResponse, LoginRequest>({\n      query: (credentials) => ({\n        url: '/login',\n        method: 'POST',\n        body: credentials,\n      }),\n      invalidatesTags: ['User'],\n      // Mock login for development\n      transformResponse: (response, meta, arg) => ({\n        user: {\n          id: 'user-001',\n          email: arg.email,\n          name: arg.email.split('@')[0],\n          role: 'attorney',\n        },\n        token: 'mock-jwt-token',\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n      }),\n    }),\n    register: builder.mutation<LoginResponse, RegisterRequest>({\n      query: (userData) => ({\n        url: '/register',\n        method: 'POST',\n        body: userData,\n      }),\n      invalidatesTags: ['User'],\n    }),\n    logout: builder.mutation<void, void>({\n      query: () => ({\n        url: '/logout',\n        method: 'POST',\n      }),\n      invalidatesTags: ['User'],\n    }),\n    refreshToken: builder.mutation<{ token: string; expiresAt: string }, void>({\n      query: () => ({\n        url: '/refresh',\n        method: 'POST',\n      }),\n    }),\n    getCurrentUser: builder.query<User, void>({\n      query: () => '/me',\n      providesTags: ['User'],\n      // Mock current user for development\n      transformResponse: () => ({\n        id: 'user-001',\n        email: 'demo@legal-sim.com',\n        name: 'Demo User',\n        role: 'attorney',\n      }),\n    }),\n    updateProfile: builder.mutation<User, Partial<User>>({\n      query: (updates) => ({\n        url: '/profile',\n        method: 'PATCH',\n        body: updates,\n      }),\n      invalidatesTags: ['User'],\n    }),\n    changePassword: builder.mutation<void, { currentPassword: string; newPassword: string }>({\n      query: (passwords) => ({\n        url: '/change-password',\n        method: 'POST',\n        body: passwords,\n      }),\n    }),\n  }),\n});\n\nexport const {\n  useLoginMutation,\n  useRegisterMutation,\n  useLogoutMutation,\n  useRefreshTokenMutation,\n  useGetCurrentUserQuery,\n  useUpdateProfileMutation,\n  useChangePasswordMutation,\n} = authApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}