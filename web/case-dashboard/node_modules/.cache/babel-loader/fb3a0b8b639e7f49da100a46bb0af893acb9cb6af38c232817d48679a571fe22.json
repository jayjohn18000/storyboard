{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  selectedRenderId: null,\n  filters: {\n    status: 'all',\n    profile: 'all',\n    caseId: 'all'\n  },\n  sortBy: 'startTime',\n  sortOrder: 'desc',\n  autoRefresh: true,\n  refreshInterval: 5000,\n  systemMetrics: {\n    cpuUsage: 0,\n    memoryUsage: 0,\n    gpuUsage: 0,\n    diskUsage: 0,\n    activeWorkers: 0,\n    queueLength: 0\n  }\n};\nconst rendersSlice = createSlice({\n  name: 'renders',\n  initialState,\n  reducers: {\n    setSelectedRender: (state, action) => {\n      state.selectedRenderId = action.payload;\n    },\n    setFilters: (state, action) => {\n      state.filters = {\n        ...state.filters,\n        ...action.payload\n      };\n    },\n    setSorting: (state, action) => {\n      state.sortBy = action.payload.sortBy;\n      state.sortOrder = action.payload.sortOrder;\n    },\n    setAutoRefresh: (state, action) => {\n      state.autoRefresh = action.payload;\n    },\n    setRefreshInterval: (state, action) => {\n      state.refreshInterval = action.payload;\n    },\n    setSystemMetrics: (state, action) => {\n      state.systemMetrics = action.payload;\n    },\n    clearFilters: state => {\n      state.filters = {\n        status: 'all',\n        profile: 'all',\n        caseId: 'all'\n      };\n    }\n  }\n});\nexport const {\n  setSelectedRender,\n  setFilters,\n  setSorting,\n  setAutoRefresh,\n  setRefreshInterval,\n  setSystemMetrics,\n  clearFilters\n} = rendersSlice.actions;\nexport default rendersSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","selectedRenderId","filters","status","profile","caseId","sortBy","sortOrder","autoRefresh","refreshInterval","systemMetrics","cpuUsage","memoryUsage","gpuUsage","diskUsage","activeWorkers","queueLength","rendersSlice","name","reducers","setSelectedRender","state","action","payload","setFilters","setSorting","setAutoRefresh","setRefreshInterval","setSystemMetrics","clearFilters","actions","reducer"],"sources":["/Users/jaylenjohnson18/Storyboard/web/case-dashboard/src/store/slices/rendersSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RenderJob } from '../api/rendersApi';\n\ninterface RendersState {\n  selectedRenderId: string | null;\n  filters: {\n    status: string;\n    profile: string;\n    caseId: string;\n  };\n  sortBy: 'startTime' | 'progress' | 'renderTime';\n  sortOrder: 'asc' | 'desc';\n  autoRefresh: boolean;\n  refreshInterval: number;\n  systemMetrics: {\n    cpuUsage: number;\n    memoryUsage: number;\n    gpuUsage: number;\n    diskUsage: number;\n    activeWorkers: number;\n    queueLength: number;\n  };\n}\n\nconst initialState: RendersState = {\n  selectedRenderId: null,\n  filters: {\n    status: 'all',\n    profile: 'all',\n    caseId: 'all',\n  },\n  sortBy: 'startTime',\n  sortOrder: 'desc',\n  autoRefresh: true,\n  refreshInterval: 5000,\n  systemMetrics: {\n    cpuUsage: 0,\n    memoryUsage: 0,\n    gpuUsage: 0,\n    diskUsage: 0,\n    activeWorkers: 0,\n    queueLength: 0,\n  },\n};\n\nconst rendersSlice = createSlice({\n  name: 'renders',\n  initialState,\n  reducers: {\n    setSelectedRender: (state, action: PayloadAction<string | null>) => {\n      state.selectedRenderId = action.payload;\n    },\n    setFilters: (state, action: PayloadAction<Partial<RendersState['filters']>>) => {\n      state.filters = { ...state.filters, ...action.payload };\n    },\n    setSorting: (state, action: PayloadAction<{ sortBy: RendersState['sortBy']; sortOrder: RendersState['sortOrder'] }>) => {\n      state.sortBy = action.payload.sortBy;\n      state.sortOrder = action.payload.sortOrder;\n    },\n    setAutoRefresh: (state, action: PayloadAction<boolean>) => {\n      state.autoRefresh = action.payload;\n    },\n    setRefreshInterval: (state, action: PayloadAction<number>) => {\n      state.refreshInterval = action.payload;\n    },\n    setSystemMetrics: (state, action: PayloadAction<RendersState['systemMetrics']>) => {\n      state.systemMetrics = action.payload;\n    },\n    clearFilters: (state) => {\n      state.filters = {\n        status: 'all',\n        profile: 'all',\n        caseId: 'all',\n      };\n    },\n  },\n});\n\nexport const {\n  setSelectedRender,\n  setFilters,\n  setSorting,\n  setAutoRefresh,\n  setRefreshInterval,\n  setSystemMetrics,\n  clearFilters,\n} = rendersSlice.actions;\n\nexport default rendersSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAwB7D,MAAMC,YAA0B,GAAG;EACjCC,gBAAgB,EAAE,IAAI;EACtBC,OAAO,EAAE;IACPC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE,KAAK;IACdC,MAAM,EAAE;EACV,CAAC;EACDC,MAAM,EAAE,WAAW;EACnBC,SAAS,EAAE,MAAM;EACjBC,WAAW,EAAE,IAAI;EACjBC,eAAe,EAAE,IAAI;EACrBC,aAAa,EAAE;IACbC,QAAQ,EAAE,CAAC;IACXC,WAAW,EAAE,CAAC;IACdC,QAAQ,EAAE,CAAC;IACXC,SAAS,EAAE,CAAC;IACZC,aAAa,EAAE,CAAC;IAChBC,WAAW,EAAE;EACf;AACF,CAAC;AAED,MAAMC,YAAY,GAAGlB,WAAW,CAAC;EAC/BmB,IAAI,EAAE,SAAS;EACflB,YAAY;EACZmB,QAAQ,EAAE;IACRC,iBAAiB,EAAEA,CAACC,KAAK,EAAEC,MAAoC,KAAK;MAClED,KAAK,CAACpB,gBAAgB,GAAGqB,MAAM,CAACC,OAAO;IACzC,CAAC;IACDC,UAAU,EAAEA,CAACH,KAAK,EAAEC,MAAuD,KAAK;MAC9ED,KAAK,CAACnB,OAAO,GAAG;QAAE,GAAGmB,KAAK,CAACnB,OAAO;QAAE,GAAGoB,MAAM,CAACC;MAAQ,CAAC;IACzD,CAAC;IACDE,UAAU,EAAEA,CAACJ,KAAK,EAAEC,MAA+F,KAAK;MACtHD,KAAK,CAACf,MAAM,GAAGgB,MAAM,CAACC,OAAO,CAACjB,MAAM;MACpCe,KAAK,CAACd,SAAS,GAAGe,MAAM,CAACC,OAAO,CAAChB,SAAS;IAC5C,CAAC;IACDmB,cAAc,EAAEA,CAACL,KAAK,EAAEC,MAA8B,KAAK;MACzDD,KAAK,CAACb,WAAW,GAAGc,MAAM,CAACC,OAAO;IACpC,CAAC;IACDI,kBAAkB,EAAEA,CAACN,KAAK,EAAEC,MAA6B,KAAK;MAC5DD,KAAK,CAACZ,eAAe,GAAGa,MAAM,CAACC,OAAO;IACxC,CAAC;IACDK,gBAAgB,EAAEA,CAACP,KAAK,EAAEC,MAAoD,KAAK;MACjFD,KAAK,CAACX,aAAa,GAAGY,MAAM,CAACC,OAAO;IACtC,CAAC;IACDM,YAAY,EAAGR,KAAK,IAAK;MACvBA,KAAK,CAACnB,OAAO,GAAG;QACdC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE,KAAK;QACdC,MAAM,EAAE;MACV,CAAC;IACH;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXe,iBAAiB;EACjBI,UAAU;EACVC,UAAU;EACVC,cAAc;EACdC,kBAAkB;EAClBC,gBAAgB;EAChBC;AACF,CAAC,GAAGZ,YAAY,CAACa,OAAO;AAExB,eAAeb,YAAY,CAACc,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}