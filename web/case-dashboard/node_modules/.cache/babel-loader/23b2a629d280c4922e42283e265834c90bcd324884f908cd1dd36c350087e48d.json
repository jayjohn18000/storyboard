{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nexport const storyboardsApi = createApi({\n  reducerPath: 'storyboardsApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${API_BASE_URL}/api/v1/storyboards`,\n    prepareHeaders: headers => {\n      const token = localStorage.getItem('legal-sim-token');\n      if (token) {\n        headers.set('authorization', `Bearer ${token}`);\n      }\n      return headers;\n    }\n  }),\n  tagTypes: ['Storyboard'],\n  endpoints: builder => ({\n    getStoryboards: builder.query({\n      query: ({\n        caseId\n      }) => caseId ? `?caseId=${caseId}` : '',\n      providesTags: ['Storyboard'],\n      // Mock data for development\n      transformResponse: () => [{\n        id: 'sb-001',\n        caseId: 'case-001',\n        title: 'Main Timeline',\n        content: `@time[0.0] #actor[John] ~action[enters room] ^evidence[doc-001]\nJohn walks into the courtroom and takes his seat.\n\n@time[5.0] #actor[Judge] ~action[addresses court] ^evidence[audio-001@00:30]\nThe judge calls the court to order and begins the proceedings.`,\n        beats: [{\n          id: 'beat-001',\n          timestamp: 0,\n          description: 'John walks into the courtroom and takes his seat',\n          actors: ['John'],\n          evidenceAnchors: [{\n            evidenceId: 'doc-001',\n            description: 'Contract document'\n          }],\n          confidence: 0.9,\n          disputed: false,\n          duration: 5\n        }, {\n          id: 'beat-002',\n          timestamp: 5,\n          description: 'The judge calls the court to order and begins the proceedings',\n          actors: ['Judge'],\n          evidenceAnchors: [{\n            evidenceId: 'audio-001',\n            timestamp: 30,\n            description: 'Court recording'\n          }],\n          confidence: 0.95,\n          disputed: false,\n          duration: 10\n        }],\n        isValid: true,\n        validationErrors: [],\n        createdAt: '2024-01-15T00:00:00Z',\n        updatedAt: '2024-01-20T00:00:00Z',\n        createdBy: 'John Attorney'\n      }]\n    }),\n    getStoryboard: builder.query({\n      query: id => `/${id}`,\n      providesTags: (result, error, id) => [{\n        type: 'Storyboard',\n        id\n      }]\n    }),\n    createStoryboard: builder.mutation({\n      query: newStoryboard => ({\n        url: '',\n        method: 'POST',\n        body: newStoryboard\n      }),\n      invalidatesTags: ['Storyboard']\n    }),\n    updateStoryboard: builder.mutation({\n      query: ({\n        id,\n        ...updates\n      }) => ({\n        url: `/${id}`,\n        method: 'PATCH',\n        body: updates\n      }),\n      invalidatesTags: (result, error, {\n        id\n      }) => [{\n        type: 'Storyboard',\n        id\n      }]\n    }),\n    deleteStoryboard: builder.mutation({\n      query: id => ({\n        url: `/${id}`,\n        method: 'DELETE'\n      }),\n      invalidatesTags: ['Storyboard']\n    }),\n    validateStoryboard: builder.mutation({\n      query: ({\n        id,\n        content\n      }) => ({\n        url: `/${id}/validate`,\n        method: 'POST',\n        body: {\n          content\n        }\n      })\n    }),\n    parseStoryboard: builder.mutation({\n      query: ({\n        content\n      }) => ({\n        url: '/parse',\n        method: 'POST',\n        body: {\n          content\n        }\n      })\n    })\n  })\n});\nexport const {\n  useGetStoryboardsQuery,\n  useGetStoryboardQuery,\n  useCreateStoryboardMutation,\n  useUpdateStoryboardMutation,\n  useDeleteStoryboardMutation,\n  useValidateStoryboardMutation,\n  useParseStoryboardMutation\n} = storyboardsApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","API_BASE_URL","process","env","REACT_APP_API_URL","storyboardsApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","token","localStorage","getItem","set","tagTypes","endpoints","builder","getStoryboards","query","caseId","providesTags","transformResponse","id","title","content","beats","timestamp","description","actors","evidenceAnchors","evidenceId","confidence","disputed","duration","isValid","validationErrors","createdAt","updatedAt","createdBy","getStoryboard","result","error","type","createStoryboard","mutation","newStoryboard","url","method","body","invalidatesTags","updateStoryboard","updates","deleteStoryboard","validateStoryboard","parseStoryboard","useGetStoryboardsQuery","useGetStoryboardQuery","useCreateStoryboardMutation","useUpdateStoryboardMutation","useDeleteStoryboardMutation","useValidateStoryboardMutation","useParseStoryboardMutation"],"sources":["/Users/jaylenjohnson18/Storyboard/web/case-dashboard/src/store/api/storyboardsApi.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport interface StoryboardBeat {\n  id: string;\n  timestamp: number;\n  description: string;\n  actors: string[];\n  evidenceAnchors: EvidenceAnchor[];\n  confidence: number;\n  disputed: boolean;\n  duration: number;\n}\n\nexport interface EvidenceAnchor {\n  evidenceId: string;\n  timestamp?: number;\n  pageNumber?: number;\n  description: string;\n}\n\nexport interface Storyboard {\n  id: string;\n  caseId: string;\n  title: string;\n  content: string;\n  beats: StoryboardBeat[];\n  isValid: boolean;\n  validationErrors: string[];\n  createdAt: string;\n  updatedAt: string;\n  createdBy: string;\n}\n\nexport interface CreateStoryboardRequest {\n  caseId: string;\n  title: string;\n  content?: string;\n}\n\nexport interface UpdateStoryboardRequest {\n  id: string;\n  title?: string;\n  content?: string;\n}\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nexport const storyboardsApi = createApi({\n  reducerPath: 'storyboardsApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${API_BASE_URL}/api/v1/storyboards`,\n    prepareHeaders: (headers) => {\n      const token = localStorage.getItem('legal-sim-token');\n      if (token) {\n        headers.set('authorization', `Bearer ${token}`);\n      }\n      return headers;\n    },\n  }),\n  tagTypes: ['Storyboard'],\n  endpoints: (builder) => ({\n    getStoryboards: builder.query<Storyboard[], { caseId?: string }>({\n      query: ({ caseId }) => (caseId ? `?caseId=${caseId}` : ''),\n      providesTags: ['Storyboard'],\n      // Mock data for development\n      transformResponse: () => [\n        {\n          id: 'sb-001',\n          caseId: 'case-001',\n          title: 'Main Timeline',\n          content: `@time[0.0] #actor[John] ~action[enters room] ^evidence[doc-001]\nJohn walks into the courtroom and takes his seat.\n\n@time[5.0] #actor[Judge] ~action[addresses court] ^evidence[audio-001@00:30]\nThe judge calls the court to order and begins the proceedings.`,\n          beats: [\n            {\n              id: 'beat-001',\n              timestamp: 0,\n              description: 'John walks into the courtroom and takes his seat',\n              actors: ['John'],\n              evidenceAnchors: [{ evidenceId: 'doc-001', description: 'Contract document' }],\n              confidence: 0.9,\n              disputed: false,\n              duration: 5,\n            },\n            {\n              id: 'beat-002',\n              timestamp: 5,\n              description: 'The judge calls the court to order and begins the proceedings',\n              actors: ['Judge'],\n              evidenceAnchors: [{ evidenceId: 'audio-001', timestamp: 30, description: 'Court recording' }],\n              confidence: 0.95,\n              disputed: false,\n              duration: 10,\n            },\n          ],\n          isValid: true,\n          validationErrors: [],\n          createdAt: '2024-01-15T00:00:00Z',\n          updatedAt: '2024-01-20T00:00:00Z',\n          createdBy: 'John Attorney',\n        },\n      ],\n    }),\n    getStoryboard: builder.query<Storyboard, string>({\n      query: (id) => `/${id}`,\n      providesTags: (result, error, id) => [{ type: 'Storyboard', id }],\n    }),\n    createStoryboard: builder.mutation<Storyboard, CreateStoryboardRequest>({\n      query: (newStoryboard) => ({\n        url: '',\n        method: 'POST',\n        body: newStoryboard,\n      }),\n      invalidatesTags: ['Storyboard'],\n    }),\n    updateStoryboard: builder.mutation<Storyboard, UpdateStoryboardRequest>({\n      query: ({ id, ...updates }) => ({\n        url: `/${id}`,\n        method: 'PATCH',\n        body: updates,\n      }),\n      invalidatesTags: (result, error, { id }) => [{ type: 'Storyboard', id }],\n    }),\n    deleteStoryboard: builder.mutation<void, string>({\n      query: (id) => ({\n        url: `/${id}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['Storyboard'],\n    }),\n    validateStoryboard: builder.mutation<{ isValid: boolean; errors: string[] }, { id: string; content: string }>({\n      query: ({ id, content }) => ({\n        url: `/${id}/validate`,\n        method: 'POST',\n        body: { content },\n      }),\n    }),\n    parseStoryboard: builder.mutation<{ beats: StoryboardBeat[] }, { content: string }>({\n      query: ({ content }) => ({\n        url: '/parse',\n        method: 'POST',\n        body: { content },\n      }),\n    }),\n  }),\n});\n\nexport const {\n  useGetStoryboardsQuery,\n  useGetStoryboardQuery,\n  useCreateStoryboardMutation,\n  useUpdateStoryboardMutation,\n  useDeleteStoryboardMutation,\n  useValidateStoryboardMutation,\n  useParseStoryboardMutation,\n} = storyboardsApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}