{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  selectedStoryboardId: null,\n  currentContent: '',\n  validationErrors: [],\n  isValid: true,\n  beats: [],\n  viewMode: 'split',\n  isPlaying: false,\n  currentBeat: 0,\n  autoSave: true,\n  lastSaved: null\n};\nconst storyboardsSlice = createSlice({\n  name: 'storyboards',\n  initialState,\n  reducers: {\n    setSelectedStoryboard: (state, action) => {\n      state.selectedStoryboardId = action.payload;\n    },\n    setCurrentContent: (state, action) => {\n      state.currentContent = action.payload;\n    },\n    setValidationErrors: (state, action) => {\n      state.validationErrors = action.payload;\n      state.isValid = action.payload.length === 0;\n    },\n    setBeats: (state, action) => {\n      state.beats = action.payload;\n    },\n    setViewMode: (state, action) => {\n      state.viewMode = action.payload;\n    },\n    setIsPlaying: (state, action) => {\n      state.isPlaying = action.payload;\n    },\n    setCurrentBeat: (state, action) => {\n      state.currentBeat = action.payload;\n    },\n    nextBeat: state => {\n      if (state.currentBeat < state.beats.length - 1) {\n        state.currentBeat += 1;\n      }\n    },\n    previousBeat: state => {\n      if (state.currentBeat > 0) {\n        state.currentBeat -= 1;\n      }\n    },\n    setAutoSave: (state, action) => {\n      state.autoSave = action.payload;\n    },\n    setLastSaved: (state, action) => {\n      state.lastSaved = action.payload;\n    },\n    resetStoryboard: state => {\n      state.currentContent = '';\n      state.validationErrors = [];\n      state.isValid = true;\n      state.beats = [];\n      state.isPlaying = false;\n      state.currentBeat = 0;\n      state.lastSaved = null;\n    }\n  }\n});\nexport const {\n  setSelectedStoryboard,\n  setCurrentContent,\n  setValidationErrors,\n  setBeats,\n  setViewMode,\n  setIsPlaying,\n  setCurrentBeat,\n  nextBeat,\n  previousBeat,\n  setAutoSave,\n  setLastSaved,\n  resetStoryboard\n} = storyboardsSlice.actions;\nexport default storyboardsSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","selectedStoryboardId","currentContent","validationErrors","isValid","beats","viewMode","isPlaying","currentBeat","autoSave","lastSaved","storyboardsSlice","name","reducers","setSelectedStoryboard","state","action","payload","setCurrentContent","setValidationErrors","length","setBeats","setViewMode","setIsPlaying","setCurrentBeat","nextBeat","previousBeat","setAutoSave","setLastSaved","resetStoryboard","actions","reducer"],"sources":["/Users/jaylenjohnson18/Storyboard/web/case-dashboard/src/store/slices/storyboardsSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Storyboard, StoryboardBeat } from '../api/storyboardsApi';\n\ninterface StoryboardsState {\n  selectedStoryboardId: string | null;\n  currentContent: string;\n  validationErrors: string[];\n  isValid: boolean;\n  beats: StoryboardBeat[];\n  viewMode: 'edit' | 'preview' | 'split';\n  isPlaying: boolean;\n  currentBeat: number;\n  autoSave: boolean;\n  lastSaved: string | null;\n}\n\nconst initialState: StoryboardsState = {\n  selectedStoryboardId: null,\n  currentContent: '',\n  validationErrors: [],\n  isValid: true,\n  beats: [],\n  viewMode: 'split',\n  isPlaying: false,\n  currentBeat: 0,\n  autoSave: true,\n  lastSaved: null,\n};\n\nconst storyboardsSlice = createSlice({\n  name: 'storyboards',\n  initialState,\n  reducers: {\n    setSelectedStoryboard: (state, action: PayloadAction<string | null>) => {\n      state.selectedStoryboardId = action.payload;\n    },\n    setCurrentContent: (state, action: PayloadAction<string>) => {\n      state.currentContent = action.payload;\n    },\n    setValidationErrors: (state, action: PayloadAction<string[]>) => {\n      state.validationErrors = action.payload;\n      state.isValid = action.payload.length === 0;\n    },\n    setBeats: (state, action: PayloadAction<StoryboardBeat[]>) => {\n      state.beats = action.payload;\n    },\n    setViewMode: (state, action: PayloadAction<StoryboardsState['viewMode']>) => {\n      state.viewMode = action.payload;\n    },\n    setIsPlaying: (state, action: PayloadAction<boolean>) => {\n      state.isPlaying = action.payload;\n    },\n    setCurrentBeat: (state, action: PayloadAction<number>) => {\n      state.currentBeat = action.payload;\n    },\n    nextBeat: (state) => {\n      if (state.currentBeat < state.beats.length - 1) {\n        state.currentBeat += 1;\n      }\n    },\n    previousBeat: (state) => {\n      if (state.currentBeat > 0) {\n        state.currentBeat -= 1;\n      }\n    },\n    setAutoSave: (state, action: PayloadAction<boolean>) => {\n      state.autoSave = action.payload;\n    },\n    setLastSaved: (state, action: PayloadAction<string>) => {\n      state.lastSaved = action.payload;\n    },\n    resetStoryboard: (state) => {\n      state.currentContent = '';\n      state.validationErrors = [];\n      state.isValid = true;\n      state.beats = [];\n      state.isPlaying = false;\n      state.currentBeat = 0;\n      state.lastSaved = null;\n    },\n  },\n});\n\nexport const {\n  setSelectedStoryboard,\n  setCurrentContent,\n  setValidationErrors,\n  setBeats,\n  setViewMode,\n  setIsPlaying,\n  setCurrentBeat,\n  nextBeat,\n  previousBeat,\n  setAutoSave,\n  setLastSaved,\n  resetStoryboard,\n} = storyboardsSlice.actions;\n\nexport default storyboardsSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}